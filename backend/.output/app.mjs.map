{
  "version": 3,
  "sources": ["../.arri/__arri_app.ts", "../../env.ts", "../src/app.ts", "../src/procedures/auth/signin.rpc.ts", "../../database/postgres.ts", "../../database/schema/users.ts", "../../database/schema/common.ts", "../../database/schema/flows.ts", "../src/procedures/auth/utils.ts", "../src/procedures/auth/signup.rpc.ts", "../src/procedures/flows/createFlow.rpc.ts", "../src/procedures/flows/getFlow.rpc.ts", "../src/procedures/flows/listFlows.rpc.ts", "../src/procedures/flows/updateFlow.rpc.ts"],
  "sourcesContent": ["import sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\nimport app from \"../src/app\";\nimport authSignin from \"./../src/procedures/auth/signin.rpc\";\nimport authSignup from \"./../src/procedures/auth/signup.rpc\";\nimport flowsCreateFlow from \"./../src/procedures/flows/createFlow.rpc\";\nimport flowsGetFlow from \"./../src/procedures/flows/getFlow.rpc\";\nimport flowsListFlows from \"./../src/procedures/flows/listFlows.rpc\";\nimport flowsUpdateFlow from \"./../src/procedures/flows/updateFlow.rpc\";\n\napp.rpc(\"auth.signin\", authSignin);\napp.rpc(\"auth.signup\", authSignup);\napp.rpc(\"flows.createFlow\", flowsCreateFlow);\napp.rpc(\"flows.getFlow\", flowsGetFlow);\napp.rpc(\"flows.listFlows\", flowsListFlows);\napp.rpc(\"flows.updateFlow\", flowsUpdateFlow);\n\nexport default app;\n", "import { config } from 'dotenv';\r\nimport { join, dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// Load environment variables from .env file in root directory\r\n// The env.ts file is compiled to .output, so we need to go up to the root\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nconfig({ path: join(__dirname, '..', '..', '.env') });\r\n\r\n// Export environment variables for use in other modules\r\nexport const DATABASE_URL = process.env['DATABASE_URL'];\r\n\r\nif (!DATABASE_URL) {\r\n    throw new Error('Missing required environment var DATABASE_URL');\r\n}\r\n", "// Import environment variables first\r\nimport '@env';\r\n\r\nimport { ArriApp } from '@arrirpc/server';\r\n\r\nconst app = new ArriApp({\r\n    onRequest: (event) => {\r\n        // Add CORS headers\r\n        const origin = event.node.req.headers.origin;\r\n        // Update this list with your frontend origins (exact scheme+host+port)\r\n        const allowedOrigins = [\r\n            'http://localhost:63600',\r\n            'http://localhost:50182',\r\n            'http://192.168.141.133:3000',\r\n        ];\r\n\r\n        // If you prefer to allow any origin without credentials, set this to true\r\n        const allowAnyOriginWithoutCredentials = false;\r\n\r\n        if (allowAnyOriginWithoutCredentials) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', '*');\r\n            // Do NOT set Allow-Credentials when using '*'\r\n        } else if (origin && allowedOrigins.includes(origin)) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', origin);\r\n            event.node.res.setHeader('Vary', 'Origin');\r\n            event.node.res.setHeader('Access-Control-Allow-Credentials', 'true');\r\n        }\r\n\r\n        event.node.res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n        event.node.res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n        event.node.res.setHeader('Access-Control-Max-Age', '86400');\r\n\r\n        // Handle preflight requests\r\n        if (event.node.req.method === 'OPTIONS') {\r\n            event.node.res.statusCode = 204;\r\n            event.node.res.end();\r\n            return;\r\n        }\r\n        \r\n        // const reqId = randomUUID().split('-').join('');\r\n    },\r\n    disableDefinitionRoute: false,\r\n});\r\n\r\nexport default app;\r\n", "import { a } from '@arrirpc/schema';\nimport { defineRpc } from '@arrirpc/server';\nimport { getDrizzle } from '@database/postgres';\nimport { Users } from '@database/schema/users';\nimport { eq } from 'drizzle-orm';\nimport { verifyPassword, generateToken } from './utils';\n\n// User Login/Signin RPC\nexport const loginUser = defineRpc({\n    params: a.object('LoginUserParams', {\n        email: a.string(),\n        password: a.string(),\n        username: a.optional(a.string()),\n    }),\n    response: a.object('LoginUserResponse', {\n        success: a.boolean(),\n        message: a.string(),\n        token: a.string(),\n        userId: a.string(),\n        isNewUser: a.boolean(),\n    }),\n    async handler({ params }) {\n        const db = getDrizzle();\n        \n        try {\n            // Find user by email or username\n            let user: any | null = null;\n            if (params.email && params.email.trim().length > 0) {\n                const usersByEmail = await db.select()\n                    .from(Users)\n                    .where(eq(Users.email, params.email))\n                    .limit(1);\n                user = usersByEmail[0] ?? null;\n            }\n            if (!user && params.username && params.username.trim().length > 0) {\n                const usersByUsername = await db.select()\n                    .from(Users)\n                    .where(eq(Users.username, params.username))\n                    .limit(1);\n                user = usersByUsername[0] ?? null;\n            }\n\n            if (!user) {\n                return {\n                    success: false,\n                    message: 'Invalid email or password',\n                    token: '',\n                    userId: '',\n                    isNewUser: false,\n                };\n            }\n\n            // Verify password\n            if (!user.password || !verifyPassword(params.password, user.password)) {\n                return {\n                    success: false,\n                    message: 'Invalid email or password',\n                    token: '',\n                    userId: '',\n                    isNewUser: false,\n                };\n            }\n\n            // Update last login time\n            await db.update(Users)\n                .set({ lastLoginAt: new Date() })\n                .where(eq(Users.id, user.id));\n            \n            // Generate session token\n            const token = generateToken(32);\n            \n            return {\n                success: true,\n                message: 'Login successful',\n                token,\n                userId: user.id,\n                isNewUser: false,\n            };\n            \n        } catch (error) {\n            console.error('Login error:', error);\n            return {\n                success: false,\n                message: 'Login failed. Please try again.',\n                token: '',\n                userId: '',\n                isNewUser: false,\n            };\n        }\n    },\n});\n\nexport default loginUser;\n", "import { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport postgres from \"postgres\";\r\nimport type { PostgresJsDatabase } from \"drizzle-orm/postgres-js\";\r\nimport { DATABASE_URL } from \"@env\";\r\n\r\n// Database connection string from environment variable\r\n\r\n// Export the client for manual queries if needed\r\nlet db: PostgresJsDatabase | undefined;\r\nlet client: postgres.Sql | undefined;\r\n\r\n// Function to get drizzle instance\r\nexport function getDrizzle(): PostgresJsDatabase {\r\n  if (db) return db;\r\n  \r\n  if (!client) {\r\n    client = postgres(DATABASE_URL!);\r\n  }\r\n  \r\n  db = drizzle(client);\r\n  return db;\r\n}\r\n\r\n// Function to close the database connection\r\nexport function closeDatabase(): void {\r\n  if (client) {\r\n    client.end();\r\n    client = undefined;\r\n    db = undefined;\r\n  }\r\n}\r\n", "import {\n  timestamp,\n  pgTable,\n  varchar,\n  boolean,\n  text,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n//\nimport { defaultDateFields, ulidField } from \"./common\";\nimport { Flows } from \"./flows\";\n\nexport const Users = pgTable(\"users\", {\n  ...defaultDateFields,\n  id: ulidField(\"id\").notNull().primaryKey(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  username: varchar(\"username\", { length: 100 }).notNull().unique(),\n  avatar: text(\"avatar\"),\n  password: varchar(\"password\", { length: 255 }),\n  emailVerified: boolean(\"email_verified\").default(false),\n  lastLoginAt: timestamp(\"last_login_at\"),\n});\n\n// Define relations\nexport const usersRelations = relations(Users, ({ many }) => ({\n  flows: many(Flows),\n}));\n\nexport type NewUser = typeof Users.$inferInsert;\nexport type Users = typeof Users.$inferSelect;\n", "import { timestamp, varchar } from 'drizzle-orm/pg-core';\r\n\r\nexport const ulidField = (name: string) => varchar(name, { length: 36 });\r\n\r\nexport const defaultDateFields = {\r\n    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),\r\n    updatedAt: timestamp('updated_at', { mode: 'date' })\r\n        .notNull()\r\n        .$onUpdate(() => new Date())\r\n        .defaultNow(),\r\n};\r\n", "import {\n    timestamp,\n    pgTable,\n    varchar,\n    boolean,\n    text,\n    json\n  } from \"drizzle-orm/pg-core\";\n  \n  import { relations } from \"drizzle-orm\";\n  //\n  import { defaultDateFields, ulidField } from \"./common\";\nimport { Users } from \"./users\";\n  \n  export const Flows = pgTable(\"flows\", {\n    ...defaultDateFields,\n    id: ulidField(\"id\").notNull().primaryKey(),\n    userId: ulidField(\"user_id\").notNull().references(() => Users.id),\n    flowName: varchar(\"flow_name\", { length: 255 }).notNull(),\n    flow: json(\"flow\").notNull(),\n  });\n  \n  // Define relations\n  export const flowsRelations = relations(Flows, ({ one }) => ({\n    user: one(Users, {\n      fields: [Flows.userId],\n      references: [Users.id],\n    }),\n  }));\n  \n  export type NewFlows = typeof Flows.$inferInsert;\n  export type Flows = typeof Flows.$inferSelect;\n  \n\n  ", "import { createHash, randomBytes } from 'crypto';\r\n\r\n/**\r\n * Generate a simple ULID-like ID (in production, use a proper ULID library like 'ulid')\r\n * @returns A unique identifier string\r\n */\r\nexport function generateULID(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2, 15);\r\n    return (timestamp + random).padEnd(30, '0').substring(0, 30);\r\n}\r\n\r\n/**\r\n * Hash a password using SHA-256 with salt\r\n * @param password - The plain text password\r\n * @returns The hashed password with salt\r\n */\r\nexport function hashPassword(password: string): string {\r\n    const salt = randomBytes(16).toString('hex');\r\n    const hash = createHash('sha256').update(password + salt).digest('hex');\r\n    return `${salt}:${hash}`;\r\n}\r\n\r\n/**\r\n * Verify a password against a hashed password\r\n * @param password - The plain text password to verify\r\n * @param hashedPassword - The hashed password to check against\r\n * @returns True if password matches, false otherwise\r\n */\r\nexport function verifyPassword(password: string, hashedPassword: string): boolean {\r\n    const [salt, hash] = hashedPassword.split(':');\r\n    if (!salt || !hash) return false;\r\n    \r\n    const computedHash = createHash('sha256').update(password + salt).digest('hex');\r\n    return computedHash === hash;\r\n}\r\n\r\n/**\r\n * Generate a random token for email verification or password reset\r\n * @param length - Length of the token (default: 32)\r\n * @returns Random token string\r\n */\r\nexport function generateToken(length: number = 32): string {\r\n    return randomBytes(length).toString('hex');\r\n}\r\n\r\n/**\r\n * Validate email format\r\n * @param email - Email to validate\r\n * @returns True if email is valid, false otherwise\r\n */\r\nexport function isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n}\r\n\r\n/**\r\n * Validate password strength\r\n * @param password - Password to validate\r\n * @returns Object with isValid boolean and errors array\r\n */\r\nexport function validatePassword(password: string): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    \r\n    if (password.length < 8) {\r\n        errors.push('Password must be at least 8 characters long');\r\n    }\r\n    \r\n    if (!/[A-Z]/.test(password)) {\r\n        errors.push('Password must contain at least one uppercase letter');\r\n    }\r\n    \r\n    if (!/[a-z]/.test(password)) {\r\n        errors.push('Password must contain at least one lowercase letter');\r\n    }\r\n    \r\n    if (!/\\d/.test(password)) {\r\n        errors.push('Password must contain at least one number');\r\n    }\r\n    \r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n", "import { a } from '@arrirpc/schema';\r\nimport { defineRpc } from '@arrirpc/server';\r\nimport { getDrizzle } from '../../../../database/postgres';\r\nimport { Users } from '../../../../database/schema/users';\r\nimport { eq } from 'drizzle-orm';\r\nimport { hashPassword, isValidEmail, validatePassword } from './utils';\r\n\r\n// Simple ULID-like ID generator (in production, use a proper ULID library like 'ulid')\r\nfunction generateULID(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2, 15);\r\n    return (timestamp + random).padEnd(30, '0').substring(0, 30);\r\n}\r\n\r\n// User Registration RPC\r\nexport const registerUser = defineRpc({\r\n    params: a.object('RegisterUserParams', {\r\n        email: a.string(),\r\n        username: a.string(),\r\n        password: a.string(),\r\n    }),\r\n    response: a.object('RegisterUserResponse', {\r\n        success: a.boolean(),\r\n        message: a.string(),\r\n    }),\r\n    async handler({ params }) {\r\n        const db = getDrizzle();\r\n        \r\n        try {\r\n            // Validate email format\r\n            if (!isValidEmail(params.email)) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Invalid email format',\r\n                };\r\n            }\r\n            \r\n            // Validate password strength\r\n            const passwordValidation = validatePassword(params.password);\r\n            if (!passwordValidation.isValid) {\r\n                return {\r\n                    success: false,\r\n                    message: `Password validation failed: ${passwordValidation.errors.join(', ')}`,\r\n                };\r\n            }\r\n            \r\n            // Check if email already exists\r\n            const existingEmail = await db.select()\r\n                .from(Users)\r\n                .where(eq(Users.email, params.email))\r\n                .limit(1);\r\n                \r\n            if (existingEmail.length > 0) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Email already exists',\r\n                };\r\n            }\r\n            \r\n            // Check if username already exists\r\n            const existingUsername = await db.select()\r\n                .from(Users)\r\n                .where(eq(Users.username, params.username))\r\n                .limit(1);\r\n                \r\n            if (existingUsername.length > 0) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Username already exists',\r\n                };\r\n            }\r\n            \r\n            // Hash password\r\n            const hashedPassword = hashPassword(params.password);\r\n            \r\n            // Generate ULID\r\n            const userId = generateULID();\r\n            \r\n            // Create user\r\n            await db.insert(Users)\r\n                .values({\r\n                    id: userId,\r\n                    email: params.email,\r\n                    username: params.username,\r\n                    password: hashedPassword,\r\n                    emailVerified: false,\r\n                });\r\n            \r\n            return {\r\n                success: true,\r\n                message: 'User registered successfully',\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('Registration error:', error);\r\n            return {\r\n                success: false,\r\n                message: 'Registration failed. Please try again.',\r\n            };\r\n        }\r\n    },\r\n});\r\n\r\nexport default registerUser;\r\n", "import { a } from '@arrirpc/schema';\nimport { defineRpc } from '@arrirpc/server';\nimport { getDrizzle } from '../../../../database/postgres';\nimport { Flows } from '../../../../database/schema/flows';\nimport { Users } from '../../../../database/schema/users';\nimport { eq } from 'drizzle-orm';\nimport { v4 as uuid } from 'uuid';\n\n// Flow Creation RPC\nexport const createFlow = defineRpc({\n    params: a.object('CreateFlowParams', {\n        userId: a.string(),\n        flowName: a.string(),\n        flow: a.any(), // JSON flow data\n    }),\n    response: a.object('CreateFlowResponse', {\n        success: a.boolean(),\n        message: a.string(),\n        flowId: a.optional(a.string()),\n    }),\n    async handler({ params }) {\n        const db = getDrizzle();\n        \n        try {\n            // Validate required fields\n            if (!params.userId || !params.flowName || !params.flow) {\n                return {\n                    success: false,\n                    message: 'Missing required fields: userId, flowName, and flow are required',\n                };\n            }   \n\n            // Validate flow name length\n            if (params.flowName.length > 255) {\n                return {\n                    success: false,\n                    message: 'Flow name must be 255 characters or less',\n                };\n            }\n\n            // Check if user exists\n            const existingUser = await db.select()\n                .from(Users)\n                .where(eq(Users.id, params.userId))\n                .limit(1);\n                \n            if (existingUser.length === 0) {\n                return {\n                    success: false,\n                    message: 'User not found',\n                };\n            }\n\n            // Generate UUID for the flow\n            const flowId = uuid();\n            \n            // Create flow\n            await db.insert(Flows)\n                .values({\n                    id: flowId,\n                    userId: params.userId,\n                    flowName: params.flowName,\n                    flow: params.flow,\n                });\n            \n            return {\n                success: true,\n                message: 'Flow created successfully',\n                flowId: flowId,\n            };\n            \n        } catch (error) {\n            console.error('Flow creation error:', error);\n            \n            // Handle specific database errors\n            if (error instanceof Error) {\n                if (error.message.includes('unique constraint')) {\n                    return {\n                        success: false,\n                        message: 'A flow with this data already exists',\n                    };\n                }\n            }\n            \n            return {\n                success: false,\n                message: 'Flow creation failed. Please try again.',\n            };\n        }\n    },\n});\n\nexport default createFlow;\n", "import { a } from '@arrirpc/schema';\r\nimport { defineRpc } from '@arrirpc/server';\r\nimport { getDrizzle } from '../../../../database/postgres';\r\nimport { Flows } from '../../../../database/schema/flows';\r\nimport { eq } from 'drizzle-orm';\r\n\r\n// Get Flow by ID RPC\r\nexport const getFlow = defineRpc({\r\n    params: a.object('GetFlowParams', {\r\n        flowId: a.string(),\r\n    }),\r\n    response: a.object('GetFlowResponse', {\r\n        success: a.boolean(),\r\n        message: a.string(),\r\n        flow: a.optional(a.any()), // JSON flow data\r\n        flowName: a.optional(a.string()),\r\n    }),\r\n    async handler({ params }) {\r\n        const db = getDrizzle();\r\n        \r\n        try {\r\n            // Validate required fields\r\n            if (!params.flowId) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Missing required field: flowId is required',\r\n                };\r\n            }\r\n\r\n            // Get flow by ID\r\n            const flow = await db.select()\r\n                .from(Flows)\r\n                .where(eq(Flows.id, params.flowId))\r\n                .limit(1);\r\n                \r\n            if (flow.length === 0) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Flow not found',\r\n                };\r\n            }\r\n\r\n            const flowData = flow[0];\r\n            \r\n            return {\r\n                success: true,\r\n                message: 'Flow retrieved successfully',\r\n                flow: flowData.flow,\r\n                flowName: flowData.flowName,\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('Get flow error:', error);\r\n            \r\n            return {\r\n                success: false,\r\n                message: 'Failed to retrieve flow. Please try again.',\r\n            };\r\n        }\r\n    },\r\n});\r\n\r\nexport default getFlow;\r\n", "import { a } from '@arrirpc/schema';\r\nimport { defineRpc } from '@arrirpc/server';\r\nimport { getDrizzle } from '../../../../database/postgres';\r\nimport { Flows } from '../../../../database/schema/flows';\r\nimport { Users } from '../../../../database/schema/users';\r\nimport { eq, desc } from 'drizzle-orm';\r\n\r\n// Flow List RPC\r\nexport const listFlows = defineRpc({\r\n    params: a.object('ListFlowsParams', {\r\n        userId: a.string(),\r\n    }),\r\n    response: a.object('ListFlowsResponse', {\r\n        success: a.boolean(),\r\n        message: a.string(),\r\n        flows: a.array(a.object('FlowItem', {\r\n            id: a.string(),\r\n            flowName: a.string(),\r\n            createdAt: a.string(),\r\n            updatedAt: a.string(),\r\n        })),\r\n    }),\r\n    async handler({ params }) {\r\n        const db = getDrizzle();\r\n        \r\n        try {\r\n            // Validate required fields\r\n            if (!params.userId) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Missing required field: userId is required',\r\n                    flows: [],\r\n                };\r\n            }\r\n\r\n            // Check if user exists\r\n            const existingUser = await db.select()\r\n                .from(Users)\r\n                .where(eq(Users.id, params.userId))\r\n                .limit(1);\r\n                \r\n            if (existingUser.length === 0) {\r\n                return {\r\n                    success: false,\r\n                    message: 'User not found',\r\n                    flows: [],\r\n                };\r\n            }\r\n\r\n            // Get flows for the user, ordered by most recent first\r\n            const userFlows = await db.select({\r\n                id: Flows.id,\r\n                flowName: Flows.flowName,\r\n                createdAt: Flows.createdAt,\r\n                updatedAt: Flows.updatedAt,\r\n            })\r\n                .from(Flows)\r\n                .where(eq(Flows.userId, params.userId))\r\n                .orderBy(desc(Flows.updatedAt));\r\n            \r\n            return {\r\n                success: true,\r\n                message: 'Flows retrieved successfully',\r\n                flows: userFlows.map(flow => ({\r\n                    id: flow.id,\r\n                    flowName: flow.flowName,\r\n                    createdAt: flow.createdAt.toISOString(),\r\n                    updatedAt: flow.updatedAt.toISOString(),\r\n                })),\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('Flow listing error:', error);\r\n            \r\n            return {\r\n                success: false,\r\n                message: 'Failed to retrieve flows. Please try again.',\r\n                flows: [],\r\n            };\r\n        }\r\n    },\r\n});\r\n\r\nexport default listFlows;\r\n", "import { a } from '@arrirpc/schema';\r\nimport { defineRpc } from '@arrirpc/server';\r\nimport { getDrizzle } from '../../../../database/postgres';\r\nimport { Flows } from '../../../../database/schema/flows';\r\nimport { eq } from 'drizzle-orm';\r\n\r\n// Flow Update RPC\r\nexport const updateFlow = defineRpc({\r\n    params: a.object('UpdateFlowParams', {\r\n        flowId: a.string(),\r\n        flow: a.any(), // JSON flow data\r\n    }),\r\n    response: a.object('UpdateFlowResponse', {\r\n        success: a.boolean(),\r\n        message: a.string(),\r\n        flowId: a.optional(a.string()),\r\n    }),\r\n    async handler({ params }) {\r\n        const db = getDrizzle();\r\n        \r\n        try {\r\n            // Validate required fields\r\n            if (!params.flowId) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Missing required field: flowId is required',\r\n                };\r\n            }\r\n\r\n            // Validate flow data is provided\r\n            if (!params.flow) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Flow data is required',\r\n                };\r\n            }\r\n\r\n            // Check if flow exists\r\n            const existingFlow = await db.select()\r\n                .from(Flows)\r\n                .where(eq(Flows.id, params.flowId))\r\n                .limit(1);\r\n                \r\n            if (existingFlow.length === 0) {\r\n                return {\r\n                    success: false,\r\n                    message: 'Flow not found',\r\n                };\r\n            }\r\n\r\n            // Prepare update data - only update the flow data\r\n            const updateData = {\r\n                flow: params.flow,\r\n            };\r\n\r\n            // Update flow\r\n            await db.update(Flows)\r\n                .set(updateData)\r\n                .where(eq(Flows.id, params.flowId));\r\n            \r\n            return {\r\n                success: true,\r\n                message: 'Flow updated successfully',\r\n                flowId: params.flowId,\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('Flow update error:', error);\r\n            \r\n            // Handle specific database errors\r\n            if (error instanceof Error) {\r\n                if (error.message.includes('unique constraint')) {\r\n                    return {\r\n                        success: false,\r\n                        message: 'A flow with this data already exists',\r\n                    };\r\n                }\r\n            }\r\n            \r\n            return {\r\n                success: false,\r\n                message: 'Flow update failed. Please try again.',\r\n            };\r\n        }\r\n    },\r\n});\r\n\r\nexport default updateFlow;\r\n"],
  "mappings": ";AAAA,OAAO,sBAAsB;;;ACA7B,SAAS,cAAc;AACvB,SAAS,MAAM,eAAe;AAC9B,SAAS,qBAAqB;AAI9B,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAM,YAAY,QAAQ,UAAU;AACpC,OAAO,EAAE,MAAM,KAAK,WAAW,MAAM,MAAM,MAAM,EAAE,CAAC;AAG7C,IAAM,eAAe,QAAQ,IAAI,cAAc;AAEtD,IAAI,CAAC,cAAc;AACf,QAAM,IAAI,MAAM,+CAA+C;AACnE;;;ACZA,SAAS,eAAe;AAExB,IAAM,MAAM,IAAI,QAAQ;AAAA,EACpB,WAAW,CAAC,UAAU;AAElB,UAAM,SAAS,MAAM,KAAK,IAAI,QAAQ;AAEtC,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAGA,UAAM,mCAAmC;AAEzC,QAAI,kCAAkC;AAClC,YAAM,KAAK,IAAI,UAAU,+BAA+B,GAAG;AAAA,IAE/D,WAAW,UAAU,eAAe,SAAS,MAAM,GAAG;AAClD,YAAM,KAAK,IAAI,UAAU,+BAA+B,MAAM;AAC9D,YAAM,KAAK,IAAI,UAAU,QAAQ,QAAQ;AACzC,YAAM,KAAK,IAAI,UAAU,oCAAoC,MAAM;AAAA,IACvE;AAEA,UAAM,KAAK,IAAI,UAAU,gCAAgC,iCAAiC;AAC1F,UAAM,KAAK,IAAI,UAAU,gCAAgC,6BAA6B;AACtF,UAAM,KAAK,IAAI,UAAU,0BAA0B,OAAO;AAG1D,QAAI,MAAM,KAAK,IAAI,WAAW,WAAW;AACrC,YAAM,KAAK,IAAI,aAAa;AAC5B,YAAM,KAAK,IAAI,IAAI;AACnB;AAAA,IACJ;AAAA,EAGJ;AAAA,EACA,wBAAwB;AAC5B,CAAC;AAED,IAAO,cAAQ;;;AC5Cf,SAAS,SAAS;AAClB,SAAS,iBAAiB;;;ACD1B,SAAS,eAAe;AACxB,OAAO,cAAc;AAOrB,IAAI;AACJ,IAAI;AAGG,SAAS,aAAiC;AAC/C,MAAI,GAAI,QAAO;AAEf,MAAI,CAAC,QAAQ;AACX,aAAS,SAAS,YAAa;AAAA,EACjC;AAEA,OAAK,QAAQ,MAAM;AACnB,SAAO;AACT;;;ACrBA;AAAA,EACE,aAAAA;AAAA,EACA,WAAAC;AAAA,EACA,WAAAC;AAAA,EACA,WAAAC;AAAA,EACA,QAAAC;AAAA,OACK;AACP,SAAS,aAAAC,kBAAiB;;;ACP1B,SAAS,WAAW,eAAe;AAE5B,IAAM,YAAY,CAAC,SAAiB,QAAQ,MAAM,EAAE,QAAQ,GAAG,CAAC;AAEhE,IAAM,oBAAoB;AAAA,EAC7B,WAAW,UAAU,cAAc,EAAE,MAAM,OAAO,CAAC,EAAE,QAAQ,EAAE,WAAW;AAAA,EAC1E,WAAW,UAAU,cAAc,EAAE,MAAM,OAAO,CAAC,EAC9C,QAAQ,EACR,UAAU,MAAM,oBAAI,KAAK,CAAC,EAC1B,WAAW;AACpB;;;ACVA;AAAA,EAEI;AAAA,EACA,WAAAC;AAAA,EAGA;AAAA,OACK;AAEP,SAAS,iBAAiB;AAKnB,IAAM,QAAQ,QAAQ,SAAS;AAAA,EACpC,GAAG;AAAA,EACH,IAAI,UAAU,IAAI,EAAE,QAAQ,EAAE,WAAW;AAAA,EACzC,QAAQ,UAAU,SAAS,EAAE,QAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,EAChE,UAAUC,SAAQ,aAAa,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ;AAAA,EACxD,MAAM,KAAK,MAAM,EAAE,QAAQ;AAC7B,CAAC;AAGM,IAAM,iBAAiB,UAAU,OAAO,CAAC,EAAE,IAAI,OAAO;AAAA,EAC3D,MAAM,IAAI,OAAO;AAAA,IACf,QAAQ,CAAC,MAAM,MAAM;AAAA,IACrB,YAAY,CAAC,MAAM,EAAE;AAAA,EACvB,CAAC;AACH,EAAE;;;AFhBG,IAAM,QAAQC,SAAQ,SAAS;AAAA,EACpC,GAAG;AAAA,EACH,IAAI,UAAU,IAAI,EAAE,QAAQ,EAAE,WAAW;AAAA,EACzC,OAAOC,SAAQ,SAAS,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO;AAAA,EAC1D,UAAUA,SAAQ,YAAY,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO;AAAA,EAChE,QAAQC,MAAK,QAAQ;AAAA,EACrB,UAAUD,SAAQ,YAAY,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC7C,eAAeE,SAAQ,gBAAgB,EAAE,QAAQ,KAAK;AAAA,EACtD,aAAaC,WAAU,eAAe;AACxC,CAAC;AAGM,IAAM,iBAAiBC,WAAU,OAAO,CAAC,EAAE,KAAK,OAAO;AAAA,EAC5D,OAAO,KAAK,KAAK;AACnB,EAAE;;;AFtBF,SAAS,UAAU;;;AKJnB,SAAS,YAAY,mBAAmB;AAiBjC,SAAS,aAAa,UAA0B;AACnD,QAAM,OAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AAC3C,QAAM,OAAO,WAAW,QAAQ,EAAE,OAAO,WAAW,IAAI,EAAE,OAAO,KAAK;AACtE,SAAO,GAAG,IAAI,IAAI,IAAI;AAC1B;AAQO,SAAS,eAAe,UAAkB,gBAAiC;AAC9E,QAAM,CAAC,MAAM,IAAI,IAAI,eAAe,MAAM,GAAG;AAC7C,MAAI,CAAC,QAAQ,CAAC,KAAM,QAAO;AAE3B,QAAM,eAAe,WAAW,QAAQ,EAAE,OAAO,WAAW,IAAI,EAAE,OAAO,KAAK;AAC9E,SAAO,iBAAiB;AAC5B;AAOO,SAAS,cAAc,SAAiB,IAAY;AACvD,SAAO,YAAY,MAAM,EAAE,SAAS,KAAK;AAC7C;AAOO,SAAS,aAAa,OAAwB;AACjD,QAAM,aAAa;AACnB,SAAO,WAAW,KAAK,KAAK;AAChC;AAOO,SAAS,iBAAiB,UAA0D;AACvF,QAAM,SAAmB,CAAC;AAE1B,MAAI,SAAS,SAAS,GAAG;AACrB,WAAO,KAAK,6CAA6C;AAAA,EAC7D;AAEA,MAAI,CAAC,QAAQ,KAAK,QAAQ,GAAG;AACzB,WAAO,KAAK,qDAAqD;AAAA,EACrE;AAEA,MAAI,CAAC,QAAQ,KAAK,QAAQ,GAAG;AACzB,WAAO,KAAK,qDAAqD;AAAA,EACrE;AAEA,MAAI,CAAC,KAAK,KAAK,QAAQ,GAAG;AACtB,WAAO,KAAK,2CAA2C;AAAA,EAC3D;AAEA,SAAO;AAAA,IACH,SAAS,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AACJ;;;AL5EO,IAAM,YAAY,UAAU;AAAA,EAC/B,QAAQ,EAAE,OAAO,mBAAmB;AAAA,IAChC,OAAO,EAAE,OAAO;AAAA,IAChB,UAAU,EAAE,OAAO;AAAA,IACnB,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC;AAAA,EACnC,CAAC;AAAA,EACD,UAAU,EAAE,OAAO,qBAAqB;AAAA,IACpC,SAAS,EAAE,QAAQ;AAAA,IACnB,SAAS,EAAE,OAAO;AAAA,IAClB,OAAO,EAAE,OAAO;AAAA,IAChB,QAAQ,EAAE,OAAO;AAAA,IACjB,WAAW,EAAE,QAAQ;AAAA,EACzB,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,OAAmB;AACvB,UAAI,OAAO,SAAS,OAAO,MAAM,KAAK,EAAE,SAAS,GAAG;AAChD,cAAM,eAAe,MAAMA,IAAG,OAAO,EAChC,KAAK,KAAK,EACV,MAAM,GAAG,MAAM,OAAO,OAAO,KAAK,CAAC,EACnC,MAAM,CAAC;AACZ,eAAO,aAAa,CAAC,KAAK;AAAA,MAC9B;AACA,UAAI,CAAC,QAAQ,OAAO,YAAY,OAAO,SAAS,KAAK,EAAE,SAAS,GAAG;AAC/D,cAAM,kBAAkB,MAAMA,IAAG,OAAO,EACnC,KAAK,KAAK,EACV,MAAM,GAAG,MAAM,UAAU,OAAO,QAAQ,CAAC,EACzC,MAAM,CAAC;AACZ,eAAO,gBAAgB,CAAC,KAAK;AAAA,MACjC;AAEA,UAAI,CAAC,MAAM;AACP,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,UACT,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,WAAW;AAAA,QACf;AAAA,MACJ;AAGA,UAAI,CAAC,KAAK,YAAY,CAAC,eAAe,OAAO,UAAU,KAAK,QAAQ,GAAG;AACnE,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,UACT,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,WAAW;AAAA,QACf;AAAA,MACJ;AAGA,YAAMA,IAAG,OAAO,KAAK,EAChB,IAAI,EAAE,aAAa,oBAAI,KAAK,EAAE,CAAC,EAC/B,MAAM,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC;AAGhC,YAAM,QAAQ,cAAc,EAAE;AAE9B,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT;AAAA,QACA,QAAQ,KAAK;AAAA,QACb,WAAW;AAAA,MACf;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,gBAAgB,KAAK;AACnC,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,WAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,qBAAQ;;;AM5Ff,SAAS,KAAAC,UAAS;AAClB,SAAS,aAAAC,kBAAiB;AAG1B,SAAS,MAAAC,WAAU;AAInB,SAAS,eAAuB;AAC5B,QAAMC,aAAY,KAAK,IAAI,EAAE,SAAS,EAAE;AACxC,QAAM,SAAS,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE;AACzD,UAAQA,aAAY,QAAQ,OAAO,IAAI,GAAG,EAAE,UAAU,GAAG,EAAE;AAC/D;AAGO,IAAM,eAAeC,WAAU;AAAA,EAClC,QAAQC,GAAE,OAAO,sBAAsB;AAAA,IACnC,OAAOA,GAAE,OAAO;AAAA,IAChB,UAAUA,GAAE,OAAO;AAAA,IACnB,UAAUA,GAAE,OAAO;AAAA,EACvB,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,wBAAwB;AAAA,IACvC,SAASA,GAAE,QAAQ;AAAA,IACnB,SAASA,GAAE,OAAO;AAAA,EACtB,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,CAAC,aAAa,OAAO,KAAK,GAAG;AAC7B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,qBAAqB,iBAAiB,OAAO,QAAQ;AAC3D,UAAI,CAAC,mBAAmB,SAAS;AAC7B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,+BAA+B,mBAAmB,OAAO,KAAK,IAAI,CAAC;AAAA,QAChF;AAAA,MACJ;AAGA,YAAM,gBAAgB,MAAMA,IAAG,OAAO,EACjC,KAAK,KAAK,EACV,MAAMC,IAAG,MAAM,OAAO,OAAO,KAAK,CAAC,EACnC,MAAM,CAAC;AAEZ,UAAI,cAAc,SAAS,GAAG;AAC1B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,mBAAmB,MAAMD,IAAG,OAAO,EACpC,KAAK,KAAK,EACV,MAAMC,IAAG,MAAM,UAAU,OAAO,QAAQ,CAAC,EACzC,MAAM,CAAC;AAEZ,UAAI,iBAAiB,SAAS,GAAG;AAC7B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,iBAAiB,aAAa,OAAO,QAAQ;AAGnD,YAAM,SAAS,aAAa;AAG5B,YAAMD,IAAG,OAAO,KAAK,EAChB,OAAO;AAAA,QACJ,IAAI;AAAA,QACJ,OAAO,OAAO;AAAA,QACd,UAAU,OAAO;AAAA,QACjB,UAAU;AAAA,QACV,eAAe;AAAA,MACnB,CAAC;AAEL,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,uBAAuB,KAAK;AAC1C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,qBAAQ;;;ACvGf,SAAS,KAAAE,UAAS;AAClB,SAAS,aAAAC,kBAAiB;AAI1B,SAAS,MAAAC,WAAU;AACnB,SAAS,MAAM,YAAY;AAGpB,IAAM,aAAaC,WAAU;AAAA,EAChC,QAAQC,GAAE,OAAO,oBAAoB;AAAA,IACjC,QAAQA,GAAE,OAAO;AAAA,IACjB,UAAUA,GAAE,OAAO;AAAA,IACnB,MAAMA,GAAE,IAAI;AAAA;AAAA,EAChB,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,sBAAsB;AAAA,IACrC,SAASA,GAAE,QAAQ;AAAA,IACnB,SAASA,GAAE,OAAO;AAAA,IAClB,QAAQA,GAAE,SAASA,GAAE,OAAO,CAAC;AAAA,EACjC,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,CAAC,OAAO,UAAU,CAAC,OAAO,YAAY,CAAC,OAAO,MAAM;AACpD,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,UAAI,OAAO,SAAS,SAAS,KAAK;AAC9B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,eAAe,MAAMA,IAAG,OAAO,EAChC,KAAK,KAAK,EACV,MAAMH,IAAG,MAAM,IAAI,OAAO,MAAM,CAAC,EACjC,MAAM,CAAC;AAEZ,UAAI,aAAa,WAAW,GAAG;AAC3B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,SAAS,KAAK;AAGpB,YAAMG,IAAG,OAAO,KAAK,EAChB,OAAO;AAAA,QACJ,IAAI;AAAA,QACJ,QAAQ,OAAO;AAAA,QACf,UAAU,OAAO;AAAA,QACjB,MAAM,OAAO;AAAA,MACjB,CAAC;AAEL,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT;AAAA,MACJ;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAG3C,UAAI,iBAAiB,OAAO;AACxB,YAAI,MAAM,QAAQ,SAAS,mBAAmB,GAAG;AAC7C,iBAAO;AAAA,YACH,SAAS;AAAA,YACT,SAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,yBAAQ;;;AC5Ff,SAAS,KAAAC,UAAS;AAClB,SAAS,aAAAC,kBAAiB;AAG1B,SAAS,MAAAC,WAAU;AAGZ,IAAM,UAAUC,WAAU;AAAA,EAC7B,QAAQC,GAAE,OAAO,iBAAiB;AAAA,IAC9B,QAAQA,GAAE,OAAO;AAAA,EACrB,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,mBAAmB;AAAA,IAClC,SAASA,GAAE,QAAQ;AAAA,IACnB,SAASA,GAAE,OAAO;AAAA,IAClB,MAAMA,GAAE,SAASA,GAAE,IAAI,CAAC;AAAA;AAAA,IACxB,UAAUA,GAAE,SAASA,GAAE,OAAO,CAAC;AAAA,EACnC,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,CAAC,OAAO,QAAQ;AAChB,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,OAAO,MAAMA,IAAG,OAAO,EACxB,KAAK,KAAK,EACV,MAAMH,IAAG,MAAM,IAAI,OAAO,MAAM,CAAC,EACjC,MAAM,CAAC;AAEZ,UAAI,KAAK,WAAW,GAAG;AACnB,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAEA,YAAM,WAAW,KAAK,CAAC;AAEvB,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM,SAAS;AAAA,QACf,UAAU,SAAS;AAAA,MACvB;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,mBAAmB,KAAK;AAEtC,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,sBAAQ;;;AC9Df,SAAS,KAAAI,UAAS;AAClB,SAAS,aAAAC,kBAAiB;AAI1B,SAAS,MAAAC,KAAI,YAAY;AAGlB,IAAM,YAAYC,WAAU;AAAA,EAC/B,QAAQC,GAAE,OAAO,mBAAmB;AAAA,IAChC,QAAQA,GAAE,OAAO;AAAA,EACrB,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,qBAAqB;AAAA,IACpC,SAASA,GAAE,QAAQ;AAAA,IACnB,SAASA,GAAE,OAAO;AAAA,IAClB,OAAOA,GAAE,MAAMA,GAAE,OAAO,YAAY;AAAA,MAChC,IAAIA,GAAE,OAAO;AAAA,MACb,UAAUA,GAAE,OAAO;AAAA,MACnB,WAAWA,GAAE,OAAO;AAAA,MACpB,WAAWA,GAAE,OAAO;AAAA,IACxB,CAAC,CAAC;AAAA,EACN,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,CAAC,OAAO,QAAQ;AAChB,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,UACT,OAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AAGA,YAAM,eAAe,MAAMA,IAAG,OAAO,EAChC,KAAK,KAAK,EACV,MAAMH,IAAG,MAAM,IAAI,OAAO,MAAM,CAAC,EACjC,MAAM,CAAC;AAEZ,UAAI,aAAa,WAAW,GAAG;AAC3B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,UACT,OAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AAGA,YAAM,YAAY,MAAMG,IAAG,OAAO;AAAA,QAC9B,IAAI,MAAM;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,WAAW,MAAM;AAAA,QACjB,WAAW,MAAM;AAAA,MACrB,CAAC,EACI,KAAK,KAAK,EACV,MAAMH,IAAG,MAAM,QAAQ,OAAO,MAAM,CAAC,EACrC,QAAQ,KAAK,MAAM,SAAS,CAAC;AAElC,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,UAAU,IAAI,WAAS;AAAA,UAC1B,IAAI,KAAK;AAAA,UACT,UAAU,KAAK;AAAA,UACf,WAAW,KAAK,UAAU,YAAY;AAAA,UACtC,WAAW,KAAK,UAAU,YAAY;AAAA,QAC1C,EAAE;AAAA,MACN;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,uBAAuB,KAAK;AAE1C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,CAAC;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,wBAAQ;;;ACnFf,SAAS,KAAAI,UAAS;AAClB,SAAS,aAAAC,kBAAiB;AAG1B,SAAS,MAAAC,WAAU;AAGZ,IAAM,aAAaC,WAAU;AAAA,EAChC,QAAQC,GAAE,OAAO,oBAAoB;AAAA,IACjC,QAAQA,GAAE,OAAO;AAAA,IACjB,MAAMA,GAAE,IAAI;AAAA;AAAA,EAChB,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,sBAAsB;AAAA,IACrC,SAASA,GAAE,QAAQ;AAAA,IACnB,SAASA,GAAE,OAAO;AAAA,IAClB,QAAQA,GAAE,SAASA,GAAE,OAAO,CAAC;AAAA,EACjC,CAAC;AAAA,EACD,MAAM,QAAQ,EAAE,OAAO,GAAG;AACtB,UAAMC,MAAK,WAAW;AAEtB,QAAI;AAEA,UAAI,CAAC,OAAO,QAAQ;AAChB,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,UAAI,CAAC,OAAO,MAAM;AACd,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,eAAe,MAAMA,IAAG,OAAO,EAChC,KAAK,KAAK,EACV,MAAMH,IAAG,MAAM,IAAI,OAAO,MAAM,CAAC,EACjC,MAAM,CAAC;AAEZ,UAAI,aAAa,WAAW,GAAG;AAC3B,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AAGA,YAAM,aAAa;AAAA,QACf,MAAM,OAAO;AAAA,MACjB;AAGA,YAAMG,IAAG,OAAO,KAAK,EAChB,IAAI,UAAU,EACd,MAAMH,IAAG,MAAM,IAAI,OAAO,MAAM,CAAC;AAEtC,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ,OAAO;AAAA,MACnB;AAAA,IAEJ,SAAS,OAAO;AACZ,cAAQ,MAAM,sBAAsB,KAAK;AAGzC,UAAI,iBAAiB,OAAO;AACxB,YAAI,MAAM,QAAQ,SAAS,mBAAmB,GAAG;AAC7C,iBAAO;AAAA,YACH,SAAS;AAAA,YACT,SAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAED,IAAO,yBAAQ;;;AbtFf,iBAAiB,QAAQ;AASzB,YAAI,IAAI,eAAe,kBAAU;AACjC,YAAI,IAAI,eAAe,kBAAU;AACjC,YAAI,IAAI,oBAAoB,sBAAe;AAC3C,YAAI,IAAI,iBAAiB,mBAAY;AACrC,YAAI,IAAI,mBAAmB,qBAAc;AACzC,YAAI,IAAI,oBAAoB,sBAAe;AAE3C,IAAO,mBAAQ;",
  "names": ["timestamp", "pgTable", "varchar", "boolean", "text", "relations", "varchar", "varchar", "pgTable", "varchar", "text", "boolean", "timestamp", "relations", "db", "a", "defineRpc", "eq", "timestamp", "defineRpc", "a", "db", "eq", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db"]
}
