{
  "version": 3,
  "sources": ["../.arri/__arri_app.ts", "../../env.ts", "../src/app.ts", "../src/procedures/auth/signin.rpc.ts", "../../database/postgres.ts", "../../database/schema/users.ts", "../../database/schema/common.ts", "../../database/schema/flows.ts", "../src/procedures/auth/utils.ts", "../src/procedures/auth/signup.rpc.ts", "../src/procedures/auth/verify-email.rpc.ts", "../src/procedures/flows/createFlow.rpc.ts", "../src/procedures/flows/getFlow.rpc.ts", "../src/procedures/flows/listFlows.rpc.ts", "../src/procedures/flows/updateFlow.rpc.ts"],
  "sourcesContent": ["import sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\nimport app from \"../src/app\";\nimport authSignin from \"./../src/procedures/auth/signin.rpc\";\nimport authSignup from \"./../src/procedures/auth/signup.rpc\";\nimport authVerifyemail from \"./../src/procedures/auth/verify-email.rpc\";\nimport flowsCreateFlow from \"./../src/procedures/flows/createFlow.rpc\";\nimport flowsGetFlow from \"./../src/procedures/flows/getFlow.rpc\";\nimport flowsListFlows from \"./../src/procedures/flows/listFlows.rpc\";\nimport flowsUpdateFlow from \"./../src/procedures/flows/updateFlow.rpc\";\n\napp.rpc(\"auth.signin\", authSignin);\napp.rpc(\"auth.signup\", authSignup);\napp.rpc(\"auth.verifyemail\", authVerifyemail);\napp.rpc(\"flows.createFlow\", flowsCreateFlow);\napp.rpc(\"flows.getFlow\", flowsGetFlow);\napp.rpc(\"flows.listFlows\", flowsListFlows);\napp.rpc(\"flows.updateFlow\", flowsUpdateFlow);\n\nexport default app;\n", "import { config } from '@dotenvx/dotenvx';\r\nimport { join, dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// Load environment variables from .env file in root directory\r\n// The env.ts file is compiled to .output, so we need to go up to the root\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nconfig({ path: join(__dirname, '..', '..', '.env') });\r\n\r\nclass Env {\r\n  DATABASE_URL: string;\r\n  SMTP_HOST: string | undefined;\r\n  SMTP_PORT: string | undefined;\r\n  SMTP_USER: string | undefined;\r\n  SMTP_PASS: string | undefined;\r\n  FE_URL: string | undefined;\r\n  FROM_EMAIL: string | undefined;\r\n\r\n  constructor() {\r\n    this.DATABASE_URL = process.env['DATABASE_URL']!;\r\n    this.SMTP_HOST = process.env['SMTP_HOST'];\r\n    this.SMTP_PORT = process.env['SMTP_PORT'];\r\n    this.SMTP_USER = process.env['SMTP_USER'];\r\n    this.SMTP_PASS = process.env['SMTP_PASS'];\r\n    this.FE_URL = process.env['FE_URL'];\r\n    this.FROM_EMAIL = process.env['FROM_EMAIL'];\r\n\r\n    if (!this.DATABASE_URL) {\r\n      throw new Error('Missing required environment var DATABASE_URL');\r\n    }\r\n  }\r\n}\r\n\r\nexport const env = new Env();\r\n", "// Import environment variables first\r\nimport '@env';\r\n\r\nimport { ArriApp } from '@arrirpc/server';\r\n\r\nconst app = new ArriApp({\r\n    onRequest: (event) => {\r\n        // Add CORS headers\r\n        const origin = event.node.req.headers.origin;\r\n        // Update this list with your frontend origins (exact scheme+host+port)\r\n        const allowedOrigins = [\r\n            'http://localhost:51934',\r\n        ];\r\n\r\n        // If you prefer to allow any origin without credentials, set this to true\r\n        const allowAnyOriginWithoutCredentials = false;\r\n\r\n        if (allowAnyOriginWithoutCredentials) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', '*');\r\n            // Do NOT set Allow-Credentials when using '*'\r\n        } else if (origin && allowedOrigins.includes(origin)) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', origin);\r\n            event.node.res.setHeader('Vary', 'Origin');\r\n            event.node.res.setHeader('Access-Control-Allow-Credentials', 'true');\r\n        }\r\n\r\n        event.node.res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n        event.node.res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n        event.node.res.setHeader('Access-Control-Max-Age', '86400');\r\n\r\n        // Handle preflight requests\r\n        if (event.node.req.method === 'OPTIONS') {\r\n            event.node.res.statusCode = 204;\r\n            event.node.res.end();\r\n            return;\r\n        }\r\n        \r\n        // const reqId = randomUUID().split('-').join('');\r\n    },\r\n    disableDefinitionRoute: false,\r\n});\r\n\r\nexport default app;\r\n", "import { a } from \"@arrirpc/schema\";\nimport { defineRpc } from \"@arrirpc/server\";\nimport { getDrizzle } from \"@database/postgres\";\nimport { Users } from \"@database/schema/users\";\nimport { eq } from \"drizzle-orm\";\nimport { verifyPassword, generateToken, sendVerificationEmail } from \"./utils\";\n\n// User Login/Signin RPC\nexport const loginUser = defineRpc({\n  params: a.object(\"LoginUserParams\", {\n    email: a.string(),\n    password: a.string(),\n    username: a.optional(a.string()),\n  }),\n  response: a.object(\"LoginUserResponse\", {\n    success: a.boolean(),\n    message: a.string(),\n    token: a.string(),\n    userId: a.string(),\n    isNewUser: a.boolean(),\n  }),\n  async handler({ params }) {\n    const db = getDrizzle();\n\n    try {\n      // Find user by email or username\n      let user: any | null = null;\n      if (params.email && params.email.trim().length > 0) {\n        const usersByEmail = await db\n          .select()\n          .from(Users)\n          .where(eq(Users.email, params.email))\n          .limit(1);\n        user = usersByEmail[0] ?? null;\n      }\n      if (!user && params.username && params.username.trim().length > 0) {\n        const usersByUsername = await db\n          .select()\n          .from(Users)\n          .where(eq(Users.username, params.username))\n          .limit(1);\n        user = usersByUsername[0] ?? null;\n      }\n\n      if (!user) {\n        return {\n          success: false,\n          message: \"Invalid email or password\",\n          token: \"\",\n          userId: \"\",\n          isNewUser: false,\n        };\n      }\n\n      // Verify password\n      if (!user.password || !verifyPassword(params.password, user.password)) {\n        return {\n          success: false,\n          message: \"Invalid email or password\",\n          token: \"\",\n          userId: \"\",\n          isNewUser: false,\n        };\n      }\n\n      // Check if email is verified\n      if (!user.emailVerified) {\n        // Send verification email again\n        try {\n          await sendVerificationEmail(user.email, user.emailVerificationToken || \"\");\n        } catch (emailError) {\n          console.error(\"Failed to send verification email:\", emailError);\n        }\n\n        return {\n          success: false,\n          message: \"Please verify your email before signing in. A new verification email has been sent.\",\n          token: \"\",\n          userId: \"\",\n          isNewUser: false,\n        };\n      }\n\n      // Update last login time\n      await db\n        .update(Users)\n        .set({ lastLoginAt: new Date() })\n        .where(eq(Users.id, user.id));\n\n      // Generate session token\n      const token = generateToken(32);\n\n      return {\n        success: true,\n        message: \"Login successful\",\n        token,\n        userId: user.id,\n        isNewUser: false,\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        message: \"Login failed. Please try again.\",\n        token: \"\",\n        userId: \"\",\n        isNewUser: false,\n      };\n    }\n  },\n});\n\nexport default loginUser;\n", "import { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport postgres from \"postgres\";\r\nimport type { PostgresJsDatabase } from \"drizzle-orm/postgres-js\";\r\nimport { env } from \"@env\";\r\n\r\n// Database connection string from environment variable\r\n\r\n// Export the client for manual queries if needed\r\nlet db: PostgresJsDatabase | undefined;\r\nlet client: postgres.Sql | undefined;\r\n\r\n// Function to get drizzle instance\r\nexport function getDrizzle(): PostgresJsDatabase {\r\n  if (db) return db;\r\n\r\n  if (!client) {\r\n    client = postgres(env.DATABASE_URL);\r\n  }\r\n\r\n  db = drizzle(client);\r\n  return db;\r\n}\r\n\r\n// Function to close the database connection\r\nexport function closeDatabase(): void {\r\n  if (client) {\r\n    client.end();\r\n    client = undefined;\r\n    db = undefined;\r\n  }\r\n}\r\n", "import {\n  timestamp,\n  pgTable,\n  varchar,\n  boolean,\n  text,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n//\nimport { defaultDateFields, ulidField } from \"./common\";\nimport { Flows } from \"./flows\";\n\nexport const Users = pgTable(\"users\", {\n  ...defaultDateFields,\n  id: ulidField(\"id\").notNull().primaryKey(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  username: varchar(\"username\", { length: 100 }).notNull().unique(),\n  avatar: text(\"avatar\"),\n  password: varchar(\"password\", { length: 255 }),\n  emailVerified: boolean(\"email_verified\").default(false),\n  emailVerificationToken: varchar(\"email_verification_token\", { length: 255 }).unique(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n});\n\n// Define relations\nexport const usersRelations = relations(Users, ({ many }) => ({\n  flows: many(Flows),\n}));\n\nexport type NewUser = typeof Users.$inferInsert;\nexport type Users = typeof Users.$inferSelect;\n", "import { timestamp, varchar } from 'drizzle-orm/pg-core';\r\n\r\nexport const ulidField = (name: string) => varchar(name, { length: 36 });\r\n\r\nexport const defaultDateFields = {\r\n    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),\r\n    updatedAt: timestamp('updated_at', { mode: 'date' })\r\n        .notNull()\r\n        .$onUpdate(() => new Date())\r\n        .defaultNow(),\r\n};\r\n", "import {\n    timestamp,\n    pgTable,\n    varchar,\n    boolean,\n    text,\n    json\n  } from \"drizzle-orm/pg-core\";\n  \n  import { relations } from \"drizzle-orm\";\n  //\n  import { defaultDateFields, ulidField } from \"./common\";\nimport { Users } from \"./users\";\n  \n  export const Flows = pgTable(\"flows\", {\n    ...defaultDateFields,\n    id: ulidField(\"id\").notNull().primaryKey(),\n    userId: ulidField(\"user_id\").notNull().references(() => Users.id),\n    flowName: varchar(\"flow_name\", { length: 255 }).notNull(),\n    flow: json(\"flow\").notNull(),\n  });\n  \n  // Define relations\n  export const flowsRelations = relations(Flows, ({ one }) => ({\n    user: one(Users, {\n      fields: [Flows.userId],\n      references: [Users.id],\n    }),\n  }));\n  \n  export type NewFlows = typeof Flows.$inferInsert;\n  export type Flows = typeof Flows.$inferSelect;\n  \n\n  ", "import { createHash, randomBytes } from 'crypto';\r\nimport nodemailer from \"nodemailer\";\r\nimport { env } from \"@env\";\r\n\r\n/**\r\n * Generate a simple ULID-like ID (in production, use a proper ULID library like 'ulid')\r\n * @returns A unique identifier string\r\n */\r\nexport function generateULID(): string {\r\n    const timestamp = Date.now().toString(36);\r\n    const random = Math.random().toString(36).substring(2, 15);\r\n    return (timestamp + random).padEnd(30, '0').substring(0, 30);\r\n}\r\n\r\n/**\r\n * Hash a password using SHA-256 with salt\r\n * @param password - The plain text password\r\n * @returns The hashed password with salt\r\n */\r\nexport function hashPassword(password: string): string {\r\n    const salt = randomBytes(16).toString('hex');\r\n    const hash = createHash('sha256').update(password + salt).digest('hex');\r\n    return `${salt}:${hash}`;\r\n}\r\n\r\n/**\r\n * Verify a password against a hashed password\r\n * @param password - The plain text password to verify\r\n * @param hashedPassword - The hashed password to check against\r\n * @returns True if password matches, false otherwise\r\n */\r\nexport function verifyPassword(password: string, hashedPassword: string): boolean {\r\n    const [salt, hash] = hashedPassword.split(':');\r\n    if (!salt || !hash) return false;\r\n    \r\n    const computedHash = createHash('sha256').update(password + salt).digest('hex');\r\n    return computedHash === hash;\r\n}\r\n\r\n/**\r\n * Generate a random token for email verification or password reset\r\n * @param length - Length of the token (default: 32)\r\n * @returns Random token string\r\n */\r\nexport function generateToken(length: number = 32): string {\r\n    return randomBytes(length).toString('hex');\r\n}\r\n\r\n/**\r\n * Validate email format\r\n * @param email - Email to validate\r\n * @returns True if email is valid, false otherwise\r\n */\r\nexport function isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n}\r\n\r\n/**\r\n * Validate password strength\r\n * @param password - Password to validate\r\n * @returns Object with isValid boolean and errors array\r\n */\r\nexport function validatePassword(password: string): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (password.length < 8) {\r\n        errors.push('Password must be at least 8 characters long');\r\n    }\r\n\r\n    if (!/[A-Z]/.test(password)) {\r\n        errors.push('Password must contain at least one uppercase letter');\r\n    }\r\n\r\n    if (!/[a-z]/.test(password)) {\r\n        errors.push('Password must contain at least one lowercase letter');\r\n    }\r\n\r\n    if (!/\\d/.test(password)) {\r\n        errors.push('Password must contain at least one number');\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors\r\n    };\r\n}\r\n\r\n/**\r\n * Send verification email to user\r\n * @param email - User's email address\r\n * @param token - Verification token\r\n */\r\nexport async function sendVerificationEmail(\r\n    email: string,\r\n    token: string\r\n): Promise<void> {\r\n    const transporter = nodemailer.createTransport({\r\n        host: env.SMTP_HOST,\r\n        port: parseInt(env.SMTP_PORT || \"587\"),\r\n        secure: false, // true for 465, false for other ports\r\n        auth: {\r\n            user: env.SMTP_USER,\r\n            pass: env.SMTP_PASS,\r\n        },\r\n    });\r\n\r\n    const verificationUrl = `${env.FE_URL}/?token=${token}`;\r\n\r\n    const mailOptions = {\r\n        from: `\"Node Path\" <${env.FROM_EMAIL}>`, // \uD83D\uDC48 display name added\r\n        to: email,\r\n        subject: \"Verify Your Email Address\",\r\n        html: `\r\n            <h1>Welcome!</h1>\r\n            <p>Please click the link below to verify your email address:</p>\r\n            <a href=\"${verificationUrl}\">Verify Email</a>\r\n            <p>If you didn't create an account, please ignore this email.</p>\r\n        `,\r\n    };\r\n\r\n    await transporter.sendMail(mailOptions);\r\n}\r\n", "import { a } from \"@arrirpc/schema\";\r\nimport { defineRpc } from \"@arrirpc/server\";\r\nimport { getDrizzle } from \"@database/postgres\";\r\nimport { Users } from \"@database/schema/users\";\r\nimport { eq } from \"drizzle-orm\";\r\nimport { hashPassword, isValidEmail, validatePassword, sendVerificationEmail } from \"./utils\";\r\nimport crypto from \"crypto\";\r\n\r\n// Simple ULID-like ID generator (in production, use a proper ULID library like 'ulid')\r\nfunction generateULID(): string {\r\n  const timestamp = Date.now().toString(36);\r\n  const random = Math.random().toString(36).substring(2, 15);\r\n  return (timestamp + random).padEnd(30, \"0\").substring(0, 30);\r\n}\r\n\r\n// Generate email verification token\r\nfunction generateVerificationToken(): string {\r\n  return crypto.randomBytes(32).toString(\"hex\");\r\n}\r\n\r\n// User Registration RPC\r\nexport const registerUser = defineRpc({\r\n  params: a.object(\"RegisterUserParams\", {\r\n    email: a.string(),\r\n    username: a.string(),\r\n    password: a.string(),\r\n  }),\r\n  response: a.object(\"RegisterUserResponse\", {\r\n    success: a.boolean(),\r\n    message: a.string(),\r\n  }),\r\n  async handler({ params }) {\r\n    const db = getDrizzle();\r\n\r\n    try {\r\n      // Validate email format\r\n      if (!isValidEmail(params.email)) {\r\n        return {\r\n          success: false,\r\n          message: \"Invalid email format\",\r\n        };\r\n      }\r\n\r\n      // Validate password strength\r\n      const passwordValidation = validatePassword(params.password);\r\n      if (!passwordValidation.isValid) {\r\n        return {\r\n          success: false,\r\n          message: `Password validation failed: ${passwordValidation.errors.join(\r\n            \", \"\r\n          )}`,\r\n        };\r\n      }\r\n\r\n      // Check if email already exists\r\n      const existingEmail = await db\r\n        .select()\r\n        .from(Users)\r\n        .where(eq(Users.email, params.email))\r\n        .limit(1);\r\n\r\n      if (existingEmail.length > 0) {\r\n        return {\r\n          success: false,\r\n          message: \"Email already exists\",\r\n        };\r\n      }\r\n\r\n      // Check if username already exists\r\n      const existingUsername = await db\r\n        .select()\r\n        .from(Users)\r\n        .where(eq(Users.username, params.username))\r\n        .limit(1);\r\n\r\n      if (existingUsername.length > 0) {\r\n        return {\r\n          success: false,\r\n          message: \"Username already exists\",\r\n        };\r\n      }\r\n\r\n      // Hash password\r\n      const hashedPassword = hashPassword(params.password);\r\n\r\n      // Generate ULID\r\n      const userId = generateULID();\r\n\r\n      // Generate verification token\r\n      const verificationToken = generateVerificationToken();\r\n\r\n      // Create user\r\n      await db.insert(Users).values({\r\n        id: userId,\r\n        email: params.email,\r\n        username: params.username,\r\n        password: hashedPassword,\r\n        emailVerified: false,\r\n        emailVerificationToken: verificationToken,\r\n      });\r\n\r\n      // Send verification email\r\n      try {\r\n        await sendVerificationEmail(params.email, verificationToken);\r\n      } catch (emailError) {\r\n        console.error(\"Failed to send verification email:\", emailError);\r\n        // Don't fail registration if email fails, but log it\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        message:\r\n          \"User registered successfully. Please check your email to verify your account.\",\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      return {\r\n        success: false,\r\n        message: \"Registration failed. Please try again.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport default registerUser;\r\n", "import { a } from \"@arrirpc/schema\";\r\nimport { defineRpc } from \"@arrirpc/server\";\r\nimport { getDrizzle } from \"@database/postgres\";\r\nimport { Users } from \"@database/schema/users\";\r\nimport { eq } from \"drizzle-orm\";\r\n\r\n// Email Verification RPC\r\nexport const verifyEmail = defineRpc({\r\n  params: a.object(\"VerifyEmailParams\", {\r\n    token: a.string(),\r\n  }),\r\n  response: a.object(\"VerifyEmailResponse\", {\r\n    success: a.boolean(),\r\n    message: a.string(),\r\n  }),\r\n  async handler({ params }) {\r\n    const db = getDrizzle();\r\n\r\n    try {\r\n      // Find user with matching verification token\r\n      const user = await db\r\n        .select()\r\n        .from(Users)\r\n        .where(eq(Users.emailVerificationToken, params.token))\r\n        .limit(1);\r\n\r\n      if (user.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"Invalid or expired verification token\",\r\n        };\r\n      }\r\n\r\n      // Update user to mark email as verified and clear token\r\n      await db\r\n        .update(Users)\r\n        .set({\r\n          emailVerified: true,\r\n          emailVerificationToken: null,\r\n        })\r\n        .where(eq(Users.id, user[0]!.id));\r\n\r\n      return {\r\n        success: true,\r\n        message: \"Email verified successfully\",\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Email verification error:\", error);\r\n      return {\r\n        success: false,\r\n        message: \"Email verification failed. Please try again.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport default verifyEmail;", "import { a } from \"@arrirpc/schema\";\nimport { defineRpc } from \"@arrirpc/server\";\nimport { getDrizzle } from \"@database/postgres\";\nimport { Flows } from \"@database/schema/flows\";\nimport { Users } from \"@database/schema/users\";\nimport { eq } from \"drizzle-orm\";\nimport { v4 as uuid } from \"uuid\";\n\n// Flow Creation RPC\nexport const createFlow = defineRpc({\n  params: a.object(\"CreateFlowParams\", {\n    userId: a.string(),\n    flowName: a.string(),\n    flow: a.any(), // JSON flow data\n  }),\n  response: a.object(\"CreateFlowResponse\", {\n    success: a.boolean(),\n    message: a.string(),\n    flowId: a.optional(a.string()),\n  }),\n  async handler({ params }) {\n    const db = getDrizzle();\n\n    try {\n      // Validate required fields\n      if (!params.userId || !params.flowName || !params.flow) {\n        return {\n          success: false,\n          message:\n            \"Missing required fields: userId, flowName, and flow are required\",\n        };\n      }\n\n      // Validate flow name length\n      if (params.flowName.length > 255) {\n        return {\n          success: false,\n          message: \"Flow name must be 255 characters or less\",\n        };\n      }\n\n      // Check if user exists\n      const existingUser = await db\n        .select()\n        .from(Users)\n        .where(eq(Users.id, params.userId))\n        .limit(1);\n\n      if (existingUser.length === 0) {\n        return {\n          success: false,\n          message: \"User not found\",\n        };\n      }\n\n      // Generate UUID for the flow\n      const flowId = uuid();\n\n      // Create flow\n      await db.insert(Flows).values({\n        id: flowId,\n        userId: params.userId,\n        flowName: params.flowName,\n        flow: params.flow,\n      });\n\n      return {\n        success: true,\n        message: \"Flow created successfully\",\n        flowId: flowId,\n      };\n    } catch (error) {\n      console.error(\"Flow creation error:\", error);\n\n      // Handle specific database errors\n      if (error instanceof Error) {\n        if (error.message.includes(\"unique constraint\")) {\n          return {\n            success: false,\n            message: \"A flow with this data already exists\",\n          };\n        }\n      }\n\n      return {\n        success: false,\n        message: \"Flow creation failed. Please try again.\",\n      };\n    }\n  },\n});\n\nexport default createFlow;\n", "import { a } from \"@arrirpc/schema\";\r\nimport { defineRpc } from \"@arrirpc/server\";\r\nimport { getDrizzle } from \"@database/postgres\";\r\nimport { Flows } from \"@database/schema/flows\";\r\nimport { eq } from \"drizzle-orm\";\r\n\r\n// Get Flow by ID RPC\r\nexport const getFlow = defineRpc({\r\n  params: a.object(\"GetFlowParams\", {\r\n    flowId: a.string(),\r\n  }),\r\n  response: a.object(\"GetFlowResponse\", {\r\n    success: a.boolean(),\r\n    message: a.string(),\r\n    flow: a.optional(a.any()), // JSON flow data\r\n    flowName: a.optional(a.string()),\r\n  }),\r\n  async handler({ params }) {\r\n    const db = getDrizzle();\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!params.flowId) {\r\n        return {\r\n          success: false,\r\n          message: \"Missing required field: flowId is required\",\r\n        };\r\n      }\r\n\r\n      // Get flow by ID\r\n      const flow = await db\r\n        .select()\r\n        .from(Flows)\r\n        .where(eq(Flows.id, params.flowId))\r\n        .limit(1);\r\n\r\n      if (flow.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"Flow not found\",\r\n        };\r\n      }\r\n\r\n      const flowData = flow[0]!;\r\n\r\n      return {\r\n        success: true,\r\n        message: \"Flow retrieved successfully\",\r\n        flow: flowData.flow,\r\n        flowName: flowData.flowName,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Get flow error:\", error);\r\n\r\n      return {\r\n        success: false,\r\n        message: \"Failed to retrieve flow. Please try again.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport default getFlow;\r\n", "import { a } from \"@arrirpc/schema\";\r\nimport { defineRpc } from \"@arrirpc/server\";\r\nimport { getDrizzle } from \"@database/postgres\";\r\nimport { Flows } from \"@database/schema/flows\";\r\nimport { Users } from \"@database/schema/users\";\r\nimport { eq, desc } from \"drizzle-orm\";\r\n\r\n// Flow List RPC\r\nexport const listFlows = defineRpc({\r\n  params: a.object(\"ListFlowsParams\", {\r\n    userId: a.string(),\r\n  }),\r\n  response: a.object(\"ListFlowsResponse\", {\r\n    success: a.boolean(),\r\n    message: a.string(),\r\n    flows: a.array(\r\n      a.object(\"FlowItem\", {\r\n        id: a.string(),\r\n        flowName: a.string(),\r\n        createdAt: a.string(),\r\n        updatedAt: a.string(),\r\n      })\r\n    ),\r\n  }),\r\n  async handler({ params }) {\r\n    const db = getDrizzle();\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!params.userId) {\r\n        return {\r\n          success: false,\r\n          message: \"Missing required field: userId is required\",\r\n          flows: [],\r\n        };\r\n      }\r\n\r\n      // Check if user exists\r\n      const existingUser = await db\r\n        .select()\r\n        .from(Users)\r\n        .where(eq(Users.id, params.userId))\r\n        .limit(1);\r\n\r\n      if (existingUser.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"User not found\",\r\n          flows: [],\r\n        };\r\n      }\r\n\r\n      // Get flows for the user, ordered by most recent first\r\n      const userFlows = await db\r\n        .select({\r\n          id: Flows.id,\r\n          flowName: Flows.flowName,\r\n          createdAt: Flows.createdAt,\r\n          updatedAt: Flows.updatedAt,\r\n        })\r\n        .from(Flows)\r\n        .where(eq(Flows.userId, params.userId))\r\n        .orderBy(desc(Flows.updatedAt));\r\n\r\n      return {\r\n        success: true,\r\n        message: \"Flows retrieved successfully\",\r\n        flows: userFlows.map((flow) => ({\r\n          id: flow.id,\r\n          flowName: flow.flowName,\r\n          createdAt: flow.createdAt.toISOString(),\r\n          updatedAt: flow.updatedAt.toISOString(),\r\n        })),\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Flow listing error:\", error);\r\n\r\n      return {\r\n        success: false,\r\n        message: \"Failed to retrieve flows. Please try again.\",\r\n        flows: [],\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport default listFlows;\r\n", "import { a } from \"@arrirpc/schema\";\r\nimport { defineRpc } from \"@arrirpc/server\";\r\nimport { getDrizzle } from \"@database/postgres\";\r\nimport { Flows } from \"@database/schema/flows\";\r\nimport { eq } from \"drizzle-orm\";\r\n\r\n// Flow Update RPC\r\nexport const updateFlow = defineRpc({\r\n  params: a.object(\"UpdateFlowParams\", {\r\n    flowId: a.string(),\r\n    flow: a.any(), // JSON flow data\r\n  }),\r\n  response: a.object(\"UpdateFlowResponse\", {\r\n    success: a.boolean(),\r\n    message: a.string(),\r\n    flowId: a.optional(a.string()),\r\n  }),\r\n  async handler({ params }) {\r\n    const db = getDrizzle();\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!params.flowId) {\r\n        return {\r\n          success: false,\r\n          message: \"Missing required field: flowId is required\",\r\n        };\r\n      }\r\n\r\n      // Validate flow data is provided\r\n      if (!params.flow) {\r\n        return {\r\n          success: false,\r\n          message: \"Flow data is required\",\r\n        };\r\n      }\r\n\r\n      // Check if flow exists\r\n      const existingFlow = await db\r\n        .select()\r\n        .from(Flows)\r\n        .where(eq(Flows.id, params.flowId))\r\n        .limit(1);\r\n\r\n      if (existingFlow.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"Flow not found\",\r\n        };\r\n      }\r\n\r\n      // Prepare update data - only update the flow data\r\n      const updateData = {\r\n        flow: params.flow,\r\n      };\r\n\r\n      // Update flow\r\n      await db.update(Flows).set(updateData).where(eq(Flows.id, params.flowId));\r\n\r\n      return {\r\n        success: true,\r\n        message: \"Flow updated successfully\",\r\n        flowId: params.flowId,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Flow update error:\", error);\r\n\r\n      // Handle specific database errors\r\n      if (error instanceof Error) {\r\n        if (error.message.includes(\"unique constraint\")) {\r\n          return {\r\n            success: false,\r\n            message: \"A flow with this data already exists\",\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        message: \"Flow update failed. Please try again.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport default updateFlow;\r\n"],
  "mappings": "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",
  "names": ["timestamp", "pgTable", "varchar", "boolean", "text", "relations", "varchar", "varchar", "pgTable", "varchar", "text", "boolean", "timestamp", "relations", "db", "a", "defineRpc", "eq", "timestamp", "defineRpc", "a", "db", "eq", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db", "a", "defineRpc", "eq", "defineRpc", "a", "db"]
}
