{
  "version": 3,
  "sources": ["../.arri/__arri_app.ts", "../env.ts", "../backend/src/app.ts"],
  "sourcesContent": ["import sourceMapSupport from \"source-map-support\";\nsourceMapSupport.install();\nimport app from \"../backend/src/app\";\n\nexport default app;\n", "import { config } from '@dotenvx/dotenvx';\r\nimport { join, dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// Load environment variables from .env file in root directory\r\n// The env.ts file is compiled to .output, so we need to go up to the root\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\nconfig({ path: join(__dirname, '..',  '.env') });\r\n\r\n// Export environment variables for use in other modules\r\nexport const DATABASE_URL = process.env['DATABASE_URL'];\r\nexport const SMTP_HOST = process.env['SMTP_HOST'];\r\nexport const SMTP_PORT = process.env['SMTP_PORT'];\r\nexport const SMTP_USER = process.env['SMTP_USER'];\r\nexport const SMTP_PASS = process.env['SMTP_PASS'];\r\nexport const BASE_URL = process.env['BASE_URL'];\r\n\r\nif (!DATABASE_URL) {\r\n    throw new Error('Missing required environment var DATABASE_URL');\r\n}\r\n", "// Import environment variables first\r\nimport '@env';\r\n\r\nimport { ArriApp } from '@arrirpc/server';\r\n\r\nconst app = new ArriApp({\r\n    onRequest: (event) => {\r\n        // Add CORS headers\r\n        const origin = event.node.req.headers.origin;\r\n        // Update this list with your frontend origins (exact scheme+host+port)\r\n        const allowedOrigins = [\r\n            'http://localhost:51738',\r\n        ];\r\n\r\n        // If you prefer to allow any origin without credentials, set this to true\r\n        const allowAnyOriginWithoutCredentials = false;\r\n\r\n        if (allowAnyOriginWithoutCredentials) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', '*');\r\n            // Do NOT set Allow-Credentials when using '*'\r\n        } else if (origin && allowedOrigins.includes(origin)) {\r\n            event.node.res.setHeader('Access-Control-Allow-Origin', origin);\r\n            event.node.res.setHeader('Vary', 'Origin');\r\n            event.node.res.setHeader('Access-Control-Allow-Credentials', 'true');\r\n        }\r\n\r\n        event.node.res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n        event.node.res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n        event.node.res.setHeader('Access-Control-Max-Age', '86400');\r\n\r\n        // Handle preflight requests\r\n        if (event.node.req.method === 'OPTIONS') {\r\n            event.node.res.statusCode = 204;\r\n            event.node.res.end();\r\n            return;\r\n        }\r\n        \r\n        // const reqId = randomUUID().split('-').join('');\r\n    },\r\n    disableDefinitionRoute: false,\r\n});\r\n\r\nexport default app;\r\n"],
  "mappings": ";AAAA,OAAO,sBAAsB;;;ACA7B,SAAS,cAAc;AACvB,SAAS,MAAM,eAAe;AAC9B,SAAS,qBAAqB;AAI9B,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAM,YAAY,QAAQ,UAAU;AACpC,OAAO,EAAE,MAAM,KAAK,WAAW,MAAO,MAAM,EAAE,CAAC;AAGxC,IAAM,eAAe,QAAQ,IAAI,cAAc;AAC/C,IAAM,YAAY,QAAQ,IAAI,WAAW;AACzC,IAAM,YAAY,QAAQ,IAAI,WAAW;AACzC,IAAM,YAAY,QAAQ,IAAI,WAAW;AACzC,IAAM,YAAY,QAAQ,IAAI,WAAW;AACzC,IAAM,WAAW,QAAQ,IAAI,UAAU;AAE9C,IAAI,CAAC,cAAc;AACf,QAAM,IAAI,MAAM,+CAA+C;AACnE;;;ACjBA,SAAS,eAAe;AAExB,IAAM,MAAM,IAAI,QAAQ;AAAA,EACpB,WAAW,CAAC,UAAU;AAElB,UAAM,SAAS,MAAM,KAAK,IAAI,QAAQ;AAEtC,UAAM,iBAAiB;AAAA,MACnB;AAAA,IACJ;AAGA,UAAM,mCAAmC;AAEzC,QAAI,kCAAkC;AAClC,YAAM,KAAK,IAAI,UAAU,+BAA+B,GAAG;AAAA,IAE/D,WAAW,UAAU,eAAe,SAAS,MAAM,GAAG;AAClD,YAAM,KAAK,IAAI,UAAU,+BAA+B,MAAM;AAC9D,YAAM,KAAK,IAAI,UAAU,QAAQ,QAAQ;AACzC,YAAM,KAAK,IAAI,UAAU,oCAAoC,MAAM;AAAA,IACvE;AAEA,UAAM,KAAK,IAAI,UAAU,gCAAgC,iCAAiC;AAC1F,UAAM,KAAK,IAAI,UAAU,gCAAgC,6BAA6B;AACtF,UAAM,KAAK,IAAI,UAAU,0BAA0B,OAAO;AAG1D,QAAI,MAAM,KAAK,IAAI,WAAW,WAAW;AACrC,YAAM,KAAK,IAAI,aAAa;AAC5B,YAAM,KAAK,IAAI,IAAI;AACnB;AAAA,IACJ;AAAA,EAGJ;AAAA,EACA,wBAAwB;AAC5B,CAAC;AAED,IAAO,cAAQ;;;AFzCf,iBAAiB,QAAQ;AAGzB,IAAO,mBAAQ;",
  "names": []
}
