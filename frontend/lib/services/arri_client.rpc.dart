// this file was autogenerated by arri
// ignore_for_file: type=lint, unused_field, unnecessary_cast
import 'dart:async';
import 'dart:convert';
import 'package:arri_client/arri_client.dart';
import 'package:http/http.dart' as http;

class ArriClient {
  final http.Client? _httpClient;
  final String _baseUrl;
  final String _clientVersion = "";
  final FutureOr<Map<String, String>> Function()? _headers;
  final Function(Object)? _onError;
  final int? _heartbeatTimeoutMultiplier;
  final Duration? _timeout;
  ArriClient({
    http.Client? httpClient,
    required String baseUrl,
    FutureOr<Map<String, String>> Function()? headers,
    Function(Object)? onError,
    int? heartbeatTimeoutMultiplier,
    Duration? timeout,
  }) : _httpClient = httpClient,
       _baseUrl = baseUrl,
       _headers = headers,
       _onError = onError,
       _heartbeatTimeoutMultiplier = heartbeatTimeoutMultiplier,
       _timeout = timeout;

  ArriClientAuthService get auth => ArriClientAuthService(
    baseUrl: _baseUrl,
    headers: _headers,
    httpClient: _httpClient,
    onError: _onError,
    heartbeatTimeoutMultiplier: _heartbeatTimeoutMultiplier,
    timeout: _timeout,
  );

  ArriClientFlowsService get flows => ArriClientFlowsService(
    baseUrl: _baseUrl,
    headers: _headers,
    httpClient: _httpClient,
    onError: _onError,
    heartbeatTimeoutMultiplier: _heartbeatTimeoutMultiplier,
    timeout: _timeout,
  );
}

class ArriClientAuthService {
  final http.Client? _httpClient;
  final String _baseUrl;
  final String _clientVersion = "";
  final FutureOr<Map<String, String>> Function()? _headers;
  final Function(Object)? _onError;
  final int? _heartbeatTimeoutMultiplier;
  final Duration? _timeout;
  ArriClientAuthService({
    http.Client? httpClient,
    required String baseUrl,
    FutureOr<Map<String, String>> Function()? headers,
    Function(Object)? onError,
    int? heartbeatTimeoutMultiplier,
    Duration? timeout,
  }) : _httpClient = httpClient,
       _baseUrl = baseUrl,
       _headers = headers,
       _onError = onError,
       _heartbeatTimeoutMultiplier = heartbeatTimeoutMultiplier,
       _timeout = timeout;

  Future<LoginUserResponse> signin(LoginUserParams params) async {
    return parsedArriRequest(
      "$_baseUrl/auth/signin",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => LoginUserResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }

  Future<RegisterUserResponse> signup(RegisterUserParams params) async {
    return parsedArriRequest(
      "$_baseUrl/auth/signup",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => RegisterUserResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }

  Future<VerifyEmailResponse> verifyemail(VerifyEmailParams params) async {
    return parsedArriRequest(
      "$_baseUrl/auth/verifyemail",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => VerifyEmailResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }
}

class ArriClientFlowsService {
  final http.Client? _httpClient;
  final String _baseUrl;
  final String _clientVersion = "";
  final FutureOr<Map<String, String>> Function()? _headers;
  final Function(Object)? _onError;
  final int? _heartbeatTimeoutMultiplier;
  final Duration? _timeout;
  ArriClientFlowsService({
    http.Client? httpClient,
    required String baseUrl,
    FutureOr<Map<String, String>> Function()? headers,
    Function(Object)? onError,
    int? heartbeatTimeoutMultiplier,
    Duration? timeout,
  }) : _httpClient = httpClient,
       _baseUrl = baseUrl,
       _headers = headers,
       _onError = onError,
       _heartbeatTimeoutMultiplier = heartbeatTimeoutMultiplier,
       _timeout = timeout;

  Future<CreateFlowResponse> createFlow(CreateFlowParams params) async {
    return parsedArriRequest(
      "$_baseUrl/flows/create-flow",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => CreateFlowResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }

  Future<GetFlowResponse> getFlow(GetFlowParams params) async {
    return parsedArriRequest(
      "$_baseUrl/flows/get-flow",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => GetFlowResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }

  Future<ListFlowsResponse> listFlows(ListFlowsParams params) async {
    return parsedArriRequest(
      "$_baseUrl/flows/list-flows",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => ListFlowsResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }

  Future<UpdateFlowResponse> updateFlow(UpdateFlowParams params) async {
    return parsedArriRequest(
      "$_baseUrl/flows/update-flow",
      method: HttpMethod.post,
      httpClient: _httpClient,
      headers: _headers,
      clientVersion: _clientVersion,
      params: params.toJson(),
      parser: (body) => UpdateFlowResponse.fromJsonString(body),
      onError: _onError,
      timeout: _timeout,
    );
  }
}

class LoginUserParams implements ArriModel {
  final String email;
  final String password;
  final String? username;
  const LoginUserParams({
    required this.email,
    required this.password,
    this.username,
  });

  factory LoginUserParams.empty() {
    return LoginUserParams(email: "", password: "");
  }

  factory LoginUserParams.fromJson(Map<String, dynamic> _input_) {
    final email = typeFromDynamic<String>(_input_["email"], "");
    final password = typeFromDynamic<String>(_input_["password"], "");
    final username = nullableTypeFromDynamic<String>(_input_["username"]);
    return LoginUserParams(
      email: email,
      password: password,
      username: username,
    );
  }

  factory LoginUserParams.fromJsonString(String input) {
    return LoginUserParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"email": email, "password": password};
    if (username != null) _output_["username"] = username;
    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("email=$email");
    _queryParts_.add("password=$password");
    if (username != null) _queryParts_.add("username=$username");
    return _queryParts_.join("&");
  }

  @override
  LoginUserParams copyWith({
    String? email,
    String? password,
    String? Function()? username,
  }) {
    return LoginUserParams(
      email: email ?? this.email,
      password: password ?? this.password,
      username: username != null ? username() : this.username,
    );
  }

  @override
  List<Object?> get props => [email, password, username];

  @override
  bool operator ==(Object other) {
    return other is LoginUserParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "LoginUserParams ${toJsonString()}";
  }
}

class LoginUserResponse implements ArriModel {
  final bool success;
  final String message;
  final String token;
  final String userId;
  final bool isNewUser;
  const LoginUserResponse({
    required this.success,
    required this.message,
    required this.token,
    required this.userId,
    required this.isNewUser,
  });

  factory LoginUserResponse.empty() {
    return LoginUserResponse(
      success: false,
      message: "",
      token: "",
      userId: "",
      isNewUser: false,
    );
  }

  factory LoginUserResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    final token = typeFromDynamic<String>(_input_["token"], "");
    final userId = typeFromDynamic<String>(_input_["userId"], "");
    final isNewUser = typeFromDynamic<bool>(_input_["isNewUser"], false);
    return LoginUserResponse(
      success: success,
      message: message,
      token: token,
      userId: userId,
      isNewUser: isNewUser,
    );
  }

  factory LoginUserResponse.fromJsonString(String input) {
    return LoginUserResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{
      "success": success,
      "message": message,
      "token": token,
      "userId": userId,
      "isNewUser": isNewUser,
    };

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    _queryParts_.add("token=$token");
    _queryParts_.add("userId=$userId");
    _queryParts_.add("isNewUser=$isNewUser");
    return _queryParts_.join("&");
  }

  @override
  LoginUserResponse copyWith({
    bool? success,
    String? message,
    String? token,
    String? userId,
    bool? isNewUser,
  }) {
    return LoginUserResponse(
      success: success ?? this.success,
      message: message ?? this.message,
      token: token ?? this.token,
      userId: userId ?? this.userId,
      isNewUser: isNewUser ?? this.isNewUser,
    );
  }

  @override
  List<Object?> get props => [success, message, token, userId, isNewUser];

  @override
  bool operator ==(Object other) {
    return other is LoginUserResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "LoginUserResponse ${toJsonString()}";
  }
}

class RegisterUserParams implements ArriModel {
  final String email;
  final String username;
  final String password;
  const RegisterUserParams({
    required this.email,
    required this.username,
    required this.password,
  });

  factory RegisterUserParams.empty() {
    return RegisterUserParams(email: "", username: "", password: "");
  }

  factory RegisterUserParams.fromJson(Map<String, dynamic> _input_) {
    final email = typeFromDynamic<String>(_input_["email"], "");
    final username = typeFromDynamic<String>(_input_["username"], "");
    final password = typeFromDynamic<String>(_input_["password"], "");
    return RegisterUserParams(
      email: email,
      username: username,
      password: password,
    );
  }

  factory RegisterUserParams.fromJsonString(String input) {
    return RegisterUserParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{
      "email": email,
      "username": username,
      "password": password,
    };

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("email=$email");
    _queryParts_.add("username=$username");
    _queryParts_.add("password=$password");
    return _queryParts_.join("&");
  }

  @override
  RegisterUserParams copyWith({
    String? email,
    String? username,
    String? password,
  }) {
    return RegisterUserParams(
      email: email ?? this.email,
      username: username ?? this.username,
      password: password ?? this.password,
    );
  }

  @override
  List<Object?> get props => [email, username, password];

  @override
  bool operator ==(Object other) {
    return other is RegisterUserParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "RegisterUserParams ${toJsonString()}";
  }
}

class RegisterUserResponse implements ArriModel {
  final bool success;
  final String message;
  const RegisterUserResponse({required this.success, required this.message});

  factory RegisterUserResponse.empty() {
    return RegisterUserResponse(success: false, message: "");
  }

  factory RegisterUserResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    return RegisterUserResponse(success: success, message: message);
  }

  factory RegisterUserResponse.fromJsonString(String input) {
    return RegisterUserResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"success": success, "message": message};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    return _queryParts_.join("&");
  }

  @override
  RegisterUserResponse copyWith({bool? success, String? message}) {
    return RegisterUserResponse(
      success: success ?? this.success,
      message: message ?? this.message,
    );
  }

  @override
  List<Object?> get props => [success, message];

  @override
  bool operator ==(Object other) {
    return other is RegisterUserResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "RegisterUserResponse ${toJsonString()}";
  }
}

class VerifyEmailParams implements ArriModel {
  final String token;
  const VerifyEmailParams({required this.token});

  factory VerifyEmailParams.empty() {
    return VerifyEmailParams(token: "");
  }

  factory VerifyEmailParams.fromJson(Map<String, dynamic> _input_) {
    final token = typeFromDynamic<String>(_input_["token"], "");
    return VerifyEmailParams(token: token);
  }

  factory VerifyEmailParams.fromJsonString(String input) {
    return VerifyEmailParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"token": token};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("token=$token");
    return _queryParts_.join("&");
  }

  @override
  VerifyEmailParams copyWith({String? token}) {
    return VerifyEmailParams(token: token ?? this.token);
  }

  @override
  List<Object?> get props => [token];

  @override
  bool operator ==(Object other) {
    return other is VerifyEmailParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "VerifyEmailParams ${toJsonString()}";
  }
}

class VerifyEmailResponse implements ArriModel {
  final bool success;
  final String message;
  const VerifyEmailResponse({required this.success, required this.message});

  factory VerifyEmailResponse.empty() {
    return VerifyEmailResponse(success: false, message: "");
  }

  factory VerifyEmailResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    return VerifyEmailResponse(success: success, message: message);
  }

  factory VerifyEmailResponse.fromJsonString(String input) {
    return VerifyEmailResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"success": success, "message": message};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    return _queryParts_.join("&");
  }

  @override
  VerifyEmailResponse copyWith({bool? success, String? message}) {
    return VerifyEmailResponse(
      success: success ?? this.success,
      message: message ?? this.message,
    );
  }

  @override
  List<Object?> get props => [success, message];

  @override
  bool operator ==(Object other) {
    return other is VerifyEmailResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "VerifyEmailResponse ${toJsonString()}";
  }
}

class CreateFlowParams implements ArriModel {
  final String userId;
  final String flowName;
  final dynamic flow;
  const CreateFlowParams({
    required this.userId,
    required this.flowName,
    required this.flow,
  });

  factory CreateFlowParams.empty() {
    return CreateFlowParams(userId: "", flowName: "", flow: null);
  }

  factory CreateFlowParams.fromJson(Map<String, dynamic> _input_) {
    final userId = typeFromDynamic<String>(_input_["userId"], "");
    final flowName = typeFromDynamic<String>(_input_["flowName"], "");
    final flow = _input_["flow"];
    return CreateFlowParams(userId: userId, flowName: flowName, flow: flow);
  }

  factory CreateFlowParams.fromJsonString(String input) {
    return CreateFlowParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{
      "userId": userId,
      "flowName": flowName,
      "flow": flow,
    };

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("userId=$userId");
    _queryParts_.add("flowName=$flowName");
    print(
      "[WARNING] any's cannot be serialized to query params. Skipping field at /CreateFlowParams/flow.",
    );
    return _queryParts_.join("&");
  }

  @override
  CreateFlowParams copyWith({String? userId, String? flowName, dynamic flow}) {
    return CreateFlowParams(
      userId: userId ?? this.userId,
      flowName: flowName ?? this.flowName,
      flow: flow ?? this.flow,
    );
  }

  @override
  List<Object?> get props => [userId, flowName, flow];

  @override
  bool operator ==(Object other) {
    return other is CreateFlowParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "CreateFlowParams ${toJsonString()}";
  }
}

class CreateFlowResponse implements ArriModel {
  final bool success;
  final String message;
  final String? flowId;
  const CreateFlowResponse({
    required this.success,
    required this.message,
    this.flowId,
  });

  factory CreateFlowResponse.empty() {
    return CreateFlowResponse(success: false, message: "");
  }

  factory CreateFlowResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    final flowId = nullableTypeFromDynamic<String>(_input_["flowId"]);
    return CreateFlowResponse(
      success: success,
      message: message,
      flowId: flowId,
    );
  }

  factory CreateFlowResponse.fromJsonString(String input) {
    return CreateFlowResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"success": success, "message": message};
    if (flowId != null) _output_["flowId"] = flowId;
    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    if (flowId != null) _queryParts_.add("flowId=$flowId");
    return _queryParts_.join("&");
  }

  @override
  CreateFlowResponse copyWith({
    bool? success,
    String? message,
    String? Function()? flowId,
  }) {
    return CreateFlowResponse(
      success: success ?? this.success,
      message: message ?? this.message,
      flowId: flowId != null ? flowId() : this.flowId,
    );
  }

  @override
  List<Object?> get props => [success, message, flowId];

  @override
  bool operator ==(Object other) {
    return other is CreateFlowResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "CreateFlowResponse ${toJsonString()}";
  }
}

class GetFlowParams implements ArriModel {
  final String flowId;
  const GetFlowParams({required this.flowId});

  factory GetFlowParams.empty() {
    return GetFlowParams(flowId: "");
  }

  factory GetFlowParams.fromJson(Map<String, dynamic> _input_) {
    final flowId = typeFromDynamic<String>(_input_["flowId"], "");
    return GetFlowParams(flowId: flowId);
  }

  factory GetFlowParams.fromJsonString(String input) {
    return GetFlowParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"flowId": flowId};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("flowId=$flowId");
    return _queryParts_.join("&");
  }

  @override
  GetFlowParams copyWith({String? flowId}) {
    return GetFlowParams(flowId: flowId ?? this.flowId);
  }

  @override
  List<Object?> get props => [flowId];

  @override
  bool operator ==(Object other) {
    return other is GetFlowParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "GetFlowParams ${toJsonString()}";
  }
}

class GetFlowResponse implements ArriModel {
  final bool success;
  final String message;
  final dynamic flow;
  final String? flowName;
  const GetFlowResponse({
    required this.success,
    required this.message,
    this.flow,
    this.flowName,
  });

  factory GetFlowResponse.empty() {
    return GetFlowResponse(success: false, message: "");
  }

  factory GetFlowResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    final flow = _input_["flow"];
    final flowName = nullableTypeFromDynamic<String>(_input_["flowName"]);
    return GetFlowResponse(
      success: success,
      message: message,
      flow: flow,
      flowName: flowName,
    );
  }

  factory GetFlowResponse.fromJsonString(String input) {
    return GetFlowResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"success": success, "message": message};
    if (flow != null) _output_["flow"] = flow;
    if (flowName != null) _output_["flowName"] = flowName;
    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    print(
      "[WARNING] any's cannot be serialized to query params. Skipping field at /GetFlowResponse/flow.",
    );
    if (flowName != null) _queryParts_.add("flowName=$flowName");
    return _queryParts_.join("&");
  }

  @override
  GetFlowResponse copyWith({
    bool? success,
    String? message,
    dynamic Function()? flow,
    String? Function()? flowName,
  }) {
    return GetFlowResponse(
      success: success ?? this.success,
      message: message ?? this.message,
      flow: flow != null ? flow() : this.flow,
      flowName: flowName != null ? flowName() : this.flowName,
    );
  }

  @override
  List<Object?> get props => [success, message, flow, flowName];

  @override
  bool operator ==(Object other) {
    return other is GetFlowResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "GetFlowResponse ${toJsonString()}";
  }
}

class ListFlowsParams implements ArriModel {
  final String userId;
  const ListFlowsParams({required this.userId});

  factory ListFlowsParams.empty() {
    return ListFlowsParams(userId: "");
  }

  factory ListFlowsParams.fromJson(Map<String, dynamic> _input_) {
    final userId = typeFromDynamic<String>(_input_["userId"], "");
    return ListFlowsParams(userId: userId);
  }

  factory ListFlowsParams.fromJsonString(String input) {
    return ListFlowsParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"userId": userId};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("userId=$userId");
    return _queryParts_.join("&");
  }

  @override
  ListFlowsParams copyWith({String? userId}) {
    return ListFlowsParams(userId: userId ?? this.userId);
  }

  @override
  List<Object?> get props => [userId];

  @override
  bool operator ==(Object other) {
    return other is ListFlowsParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "ListFlowsParams ${toJsonString()}";
  }
}

class ListFlowsResponse implements ArriModel {
  final bool success;
  final String message;
  final List<FlowItem> flows;
  const ListFlowsResponse({
    required this.success,
    required this.message,
    required this.flows,
  });

  factory ListFlowsResponse.empty() {
    return ListFlowsResponse(success: false, message: "", flows: []);
  }

  factory ListFlowsResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    final flows = _input_["flows"] is List
        ? (_input_["flows"] as List)
              .map(
                (_el_) => _el_ is Map<String, dynamic>
                    ? FlowItem.fromJson(_el_)
                    : FlowItem.empty(),
              )
              .toList()
        : <FlowItem>[];
    return ListFlowsResponse(success: success, message: message, flows: flows);
  }

  factory ListFlowsResponse.fromJsonString(String input) {
    return ListFlowsResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{
      "success": success,
      "message": message,
      "flows": flows.map((_el_) => _el_.toJson()).toList(),
    };

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    print(
      "[WARNING] arrays cannot be serialized to query params. Skipping field at /ListFlowsResponse/flows.",
    );
    return _queryParts_.join("&");
  }

  @override
  ListFlowsResponse copyWith({
    bool? success,
    String? message,
    List<FlowItem>? flows,
  }) {
    return ListFlowsResponse(
      success: success ?? this.success,
      message: message ?? this.message,
      flows: flows ?? this.flows,
    );
  }

  @override
  List<Object?> get props => [success, message, flows];

  @override
  bool operator ==(Object other) {
    return other is ListFlowsResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "ListFlowsResponse ${toJsonString()}";
  }
}

class FlowItem implements ArriModel {
  final String id;
  final String flowName;
  final String createdAt;
  final String updatedAt;
  const FlowItem({
    required this.id,
    required this.flowName,
    required this.createdAt,
    required this.updatedAt,
  });

  factory FlowItem.empty() {
    return FlowItem(id: "", flowName: "", createdAt: "", updatedAt: "");
  }

  factory FlowItem.fromJson(Map<String, dynamic> _input_) {
    final id = typeFromDynamic<String>(_input_["id"], "");
    final flowName = typeFromDynamic<String>(_input_["flowName"], "");
    final createdAt = typeFromDynamic<String>(_input_["createdAt"], "");
    final updatedAt = typeFromDynamic<String>(_input_["updatedAt"], "");
    return FlowItem(
      id: id,
      flowName: flowName,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }

  factory FlowItem.fromJsonString(String input) {
    return FlowItem.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{
      "id": id,
      "flowName": flowName,
      "createdAt": createdAt,
      "updatedAt": updatedAt,
    };

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("id=$id");
    _queryParts_.add("flowName=$flowName");
    _queryParts_.add("createdAt=$createdAt");
    _queryParts_.add("updatedAt=$updatedAt");
    return _queryParts_.join("&");
  }

  @override
  FlowItem copyWith({
    String? id,
    String? flowName,
    String? createdAt,
    String? updatedAt,
  }) {
    return FlowItem(
      id: id ?? this.id,
      flowName: flowName ?? this.flowName,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  List<Object?> get props => [id, flowName, createdAt, updatedAt];

  @override
  bool operator ==(Object other) {
    return other is FlowItem && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "FlowItem ${toJsonString()}";
  }
}

class UpdateFlowParams implements ArriModel {
  final String flowId;
  final dynamic flow;
  const UpdateFlowParams({required this.flowId, required this.flow});

  factory UpdateFlowParams.empty() {
    return UpdateFlowParams(flowId: "", flow: null);
  }

  factory UpdateFlowParams.fromJson(Map<String, dynamic> _input_) {
    final flowId = typeFromDynamic<String>(_input_["flowId"], "");
    final flow = _input_["flow"];
    return UpdateFlowParams(flowId: flowId, flow: flow);
  }

  factory UpdateFlowParams.fromJsonString(String input) {
    return UpdateFlowParams.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"flowId": flowId, "flow": flow};

    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("flowId=$flowId");
    print(
      "[WARNING] any's cannot be serialized to query params. Skipping field at /UpdateFlowParams/flow.",
    );
    return _queryParts_.join("&");
  }

  @override
  UpdateFlowParams copyWith({String? flowId, dynamic flow}) {
    return UpdateFlowParams(
      flowId: flowId ?? this.flowId,
      flow: flow ?? this.flow,
    );
  }

  @override
  List<Object?> get props => [flowId, flow];

  @override
  bool operator ==(Object other) {
    return other is UpdateFlowParams && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "UpdateFlowParams ${toJsonString()}";
  }
}

class UpdateFlowResponse implements ArriModel {
  final bool success;
  final String message;
  final String? flowId;
  const UpdateFlowResponse({
    required this.success,
    required this.message,
    this.flowId,
  });

  factory UpdateFlowResponse.empty() {
    return UpdateFlowResponse(success: false, message: "");
  }

  factory UpdateFlowResponse.fromJson(Map<String, dynamic> _input_) {
    final success = typeFromDynamic<bool>(_input_["success"], false);
    final message = typeFromDynamic<String>(_input_["message"], "");
    final flowId = nullableTypeFromDynamic<String>(_input_["flowId"]);
    return UpdateFlowResponse(
      success: success,
      message: message,
      flowId: flowId,
    );
  }

  factory UpdateFlowResponse.fromJsonString(String input) {
    return UpdateFlowResponse.fromJson(json.decode(input));
  }

  @override
  Map<String, dynamic> toJson() {
    final _output_ = <String, dynamic>{"success": success, "message": message};
    if (flowId != null) _output_["flowId"] = flowId;
    return _output_;
  }

  @override
  String toJsonString() {
    return json.encode(toJson());
  }

  @override
  String toUrlQueryParams() {
    final _queryParts_ = <String>[];
    _queryParts_.add("success=$success");
    _queryParts_.add("message=$message");
    if (flowId != null) _queryParts_.add("flowId=$flowId");
    return _queryParts_.join("&");
  }

  @override
  UpdateFlowResponse copyWith({
    bool? success,
    String? message,
    String? Function()? flowId,
  }) {
    return UpdateFlowResponse(
      success: success ?? this.success,
      message: message ?? this.message,
      flowId: flowId != null ? flowId() : this.flowId,
    );
  }

  @override
  List<Object?> get props => [success, message, flowId];

  @override
  bool operator ==(Object other) {
    return other is UpdateFlowResponse && listsAreEqual(props, other.props);
  }

  @override
  int get hashCode => listToHashCode(props);

  @override
  String toString() {
    return "UpdateFlowResponse ${toJsonString()}";
  }
}
